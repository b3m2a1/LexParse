Notebook[{

Cell[CellGroupData[{
Cell["\[LeftCeiling]Tokens\[RightFloor]", "CodeSection",
 Evaluatable->True,ExpressionUUID->"b4ac22eb-99dc-4563-9703-cb6c444e1882"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TokenStream", "::", "usage"}], "=", 
   "\"\<An object representing a stream of tokens\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"6a8c44be-3979-45e4-9c76-e3ccac069dfb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetTokenizerCheckpoint", "::", "usage"}], "=", 
   "\"\<Sets the Tokenizer checkpoint\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ResetTokenizerCheckpoint", "::", "usage"}], "=", 
   "\"\<Reverts the Tokenizer checkpoint\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WithTokenizerCheckpoint", "::", "usage"}], "=", 
   "\"\<Wrapper for tokenizing\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"ba126e0b-1f22-43dd-b137-409a2eee4567"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TokenRead", "::", "usage"}], "=", 
   "\"\<Pulls n tokens out of a TokenStream\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TokenStreamer", "::", "usage"}], "=", 
   "\"\<Lower-level object for faster token streaming\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"a6c9f0f2-08a6-478d-84d7-d741e5cdf87e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"e0f45a60-46f0-4eb8-81df-\
39a28fd218ea"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenStream\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"c0a45cf5-5ba2-45af-8e1e-dcdd73759df1"],

Cell[BoxData[
 RowBox[{"RegisterInterface", "[", "\n", "  ", 
  RowBox[{"TokenStream", ",", "\n", "  ", 
   RowBox[{"{", "\n", "    ", 
    RowBox[{"\"\<Tokens\>\"", ",", "\n", "    ", "\"\<Stream\>\""}], "\n", 
    "    ", "}"}], ",", "\n", "  ", 
   RowBox[{"\"\<Constructor\>\"", "\[Rule]", "buildTokenStream"}]}], "\n", 
  "  ", "]"}]], \
"CodeInput",ExpressionUUID->"bff26796-4b55-4fc4-979d-314e09df889f"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]buildTokenStream\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"1fac4929-6879-4678-a254-0df20b5314ed"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l_LexerObject", ",", " ", "i_InputStream"}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Tokens\>\"", "\[Rule]", 
      RowBox[{"l", "[", "\"\<Tokens\>\"", "]"}]}], ",", " ", 
     RowBox[{"\"\<Stream\>\"", "\[Rule]", "i"}]}], "|>"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l_LexerObject", ",", " ", 
     RowBox[{"s_String", "?", 
      RowBox[{"(", 
       RowBox[{"Not", "@*", "FileExistsQ"}], ")"}]}]}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l", ",", " ", 
     RowBox[{"StringToStream", "[", "s", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l_LexerObject", ",", " ", 
     RowBox[{"s_String", "?", 
      RowBox[{"(", "FileExistsQ", ")"}]}]}], "]"}], ":=", "\n", " ", 
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l", ",", " ", 
     RowBox[{"OpenRead", "[", "s", "]"}]}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"d0f89e1d-97c1-439a-9e4c-d5cdfd6fadf0"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Methods\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"bff165c1-40ca-4886-baaf-54efd94ca84d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InterfaceMethod", "[", "TokenStream", "]"}], "@", "\n", "  ", 
    RowBox[{
     RowBox[{"t_TokenStream", "[", "\"\<Read\>\"", "]"}], "[", 
     RowBox[{"n", ":", 
      RowBox[{"_Integer", "?", "Positive"}], ":", "1"}], "]"}]}], ":=", "\n", 
   "    ", 
   RowBox[{"TokenRead", "[", 
    RowBox[{"t", ",", " ", "n"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InterfaceMethod", "[", "TokenStream", "]"}], "@", "\n", "  ", 
    RowBox[{
     RowBox[{"t_TokenStream", "[", "\"\<Streamer\>\"", "]"}], "[", "]"}]}], ":=",
    "\n", "    ", 
   RowBox[{"TokenStreamer", "[", "t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InterfaceMethod", "[", "TokenStream", "]"}], "@", "\n", "  ", 
    RowBox[{
     RowBox[{"t_TokenStream", "[", "\"\<Close\>\"", "]"}], "[", "]"}]}], ":=",
    "\n", "    ", 
   RowBox[{"Close", "@", 
    RowBox[{"t", "[", "\"\<Stream\>\"", "]"}]}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"e05b3df5-a33d-48ba-bc92-6e59c71bca19"]\

}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenRead\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"33251102-66d4-4c0c-bb98-ce3c6c2cbab8"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]$checkpoints\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"2b72d57d-4a0f-4076-8995-3c3df2f99e9f"],

Cell["\<\
\[LeftCeiling]
\tMight be better to do with Language`ExpressionStore ?
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"b806b5cd-00ca-4a22-a903-f61c1a530db7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"!", 
     RowBox[{"AssociationQ", "[", "$checkpoints", "]"}]}], ",", " ", 
    RowBox[{"$checkpoints", "=", 
     RowBox[{"<|", "|>"}]}]}], "]"}], 
  ";"}]], "CodeInput",ExpressionUUID->"09ed5a43-2767-4c09-807d-d9a87fb775e3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetTokenizerCheckpoint", "[", "stream_", "]"}], ":=", "\n", "  ", 
   
   RowBox[{
    RowBox[{"$checkpoints", "[", "stream", "]"}], " ", "=", " ", 
    RowBox[{"StreamPosition", "[", "stream", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ResetTokenizerCheckpoint", "[", "stream_", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"SetStreamPosition", "[", 
    RowBox[{"stream", ",", " ", 
     RowBox[{"$checkpoints", "[", "stream", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WithTokenizerCheckpoint", "[", 
    RowBox[{"stream_", ",", " ", "expr_"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"$checkpoints", " ", "=", " ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"AssociationQ", "[", "$checkpoints", "]"}]}], ",", " ", 
         RowBox[{"<|", "|>"}], ",", " ", "$checkpoints"}], "]"}]}], "}"}], 
     ",", "\n", "    ", 
     RowBox[{
      RowBox[{"SetTokenizerCheckpoint", "[", "stream", "]"}], ";", "\n", 
      "    ", "expr"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"WithTokenizerCheckpoint", "~", "SetAttributes", "~", "HoldRest"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"2e37b563-cd39-4029-95c3-34613272f2d9"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]readStringToken\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"164519f9-0f72-4dba-a541-521d1fedfb56"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"readStringToken", "[", 
    RowBox[{"tok_", ",", " ", 
     RowBox[{"escape_:", "\"\<\\\\\>\""}]}], "]"}], "[", 
   RowBox[{"stream_", ",", " ", "body_", ",", " ", "token_"}], "]"}], ":=", 
  "\n", "  ", 
  RowBox[{"Module", "[", "\n", "    ", 
   RowBox[{
    RowBox[{"{", "\n", "      ", 
     RowBox[{"tmp", ",", "\n", "      ", 
      RowBox[{"str", " ", "=", " ", 
       RowBox[{"Read", "[", 
        RowBox[{"stream", ",", " ", "Record", ",", " ", 
         RowBox[{"RecordSeparators", "\[Rule]", 
          RowBox[{"{", "tok", "}"}]}]}], "]"}]}]}], "\n", "      ", "}"}], 
    ",", "\n", "    ", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"StringQ", "[", "str", "]"}], "&&", 
        RowBox[{"StringEndsQ", "[", 
         RowBox[{"str", ",", " ", "escape"}], "]"}]}], ",", "\n", "      ", 
       RowBox[{
        RowBox[{"tmp", " ", "=", " ", 
         RowBox[{"Read", "[", 
          RowBox[{"stream", ",", " ", "Record", ",", " ", 
           RowBox[{"RecordSeparators", "\[Rule]", 
            RowBox[{"{", "tok", "}"}]}]}], "]"}]}], ";", "\n", "      ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tmp", "===", "EndOfFile"}], ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\n", "      ", 
        RowBox[{"str", " ", "=", " ", 
         RowBox[{"str", "<>", "tok", "<>", "tmp"}]}], ";"}]}], "\n", "      ",
       "]"}], ";", "\n", "    ", "str"}]}], "\n", "    ", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"37f16100-2256-4251-9fe6-d2593fc6d10a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]readLookAhead\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"8748ec08-5809-4d1a-8464-3bf26011d7c1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"readLookAhead", "[", "lookAheadDispatcher_", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"readLookAhead", "[", 
    RowBox[{"lookAheadDispatcher", ",", " ", 
     RowBox[{"tokenPuller", "[", 
      RowBox[{"Keys", "[", "lookAheadDispatcher", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"readLookAhead", "[", 
    RowBox[{"lookAheadDispatcher_", ",", " ", "tokenPuller_"}], "]"}], "[", 
   RowBox[{"stream_", ",", " ", "body_", ",", " ", "token_"}], "]"}], ":=", 
  "\n", "  ", 
  RowBox[{
   RowBox[{"lookAheadDispatcher", "[", 
    RowBox[{"tokenPuller", "[", "stream", "]"}], "]"}], "[", 
   RowBox[{"stream", ",", " ", "body", ",", " ", "token"}], 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"b65e93d5-62d3-478b-ab1e-d7ba41d5fe16"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenStreamer\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"7f304344-c27b-4e9a-aa57-e1e589c50e79"],

Cell["\<\
\[LeftCeiling]
\tDesigned to be as minimal overhead as can still be convenient
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"d8664cb7-2f1c-407c-bae2-e3cb779b6e39"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TokenStreamer", "[", "t_", "]"}], ":=", "\n", "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"stream", "=", 
        RowBox[{"t", "[", "\"\<Stream\>\"", "]"}]}], ",", " ", 
       RowBox[{"spec", "=", 
        RowBox[{"prepTokenHandlers", "@", 
         RowBox[{"t", "[", "\"\<Tokens\>\"", "]"}]}]}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"TokenStreamer", "[", 
      RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TokenStreamer", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", "\n",
    "  ", 
   RowBox[{"TokenStreamer", "[", 
    RowBox[{"{", "\n", "    ", 
     RowBox[{"t", ",", "\n", "    ", "stream", ",", "\n", "    ", 
      RowBox[{"spec", "[", "\"\<Handlers\>\"", "]"}], ",", " ", "\n", "    ", 
      
      RowBox[{"spec", "[", "\"\<Characters\>\"", "]"}], ",", "\n", "    ", 
      RowBox[{"tokenPuller", "[", 
       RowBox[{"spec", "[", "\"\<Characters\>\"", "]"}], "]"}]}], "\n", 
     "    ", "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TokenStreamerRead", "[", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"{", 
      RowBox[{
      "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
       ",", " ", "tokPuller_"}], "}"}], "]"}], ",", " ", "n_"}], "]"}], ":=", 
  "\n", "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"body", ",", " ", "token"}], "}"}], ",", "\n", "    ", 
    RowBox[{"Table", "[", "\n", "      ", 
     RowBox[{
      RowBox[{
       RowBox[{"body", " ", "=", " ", "\n", "        ", 
        RowBox[{"Read", "[", 
         RowBox[{"stream", ",", " ", "Record", ",", "\n", "  ", "        ", 
          RowBox[{"RecordSeparators", "\[Rule]", "seps"}]}], "\n", "  ", 
         "        ", "]"}]}], ";", "\n", "  ", "    ", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"body", "===", "EndOfFile"}], ",", " ", "\n", "  ", "      ", 
         RowBox[{
          RowBox[{"handlers", "[", "EndOfFile", "]"}], "[", "\n", "  ", 
          "        ", 
          RowBox[{
          "t", ",", "\n", "  ", "        ", "EndOfFile", ",", "\n", "  ", 
           "        ", "EndOfFile"}], "\n", "  ", "        ", "]"}], ",", 
         "\n", "  ", "      ", 
         RowBox[{
          RowBox[{"token", " ", "=", " ", 
           RowBox[{"tokPuller", "[", "stream", "]"}]}], ";", "\n", "  ", 
          "      ", 
          RowBox[{
           RowBox[{"handlers", "[", "token", "]"}], "[", "\n", "  ", 
           "        ", 
           RowBox[{
           "t", ",", "\n", "  ", "        ", "body", ",", "\n", "  ", 
            "        ", "token"}], "\n", "          ", "]"}]}]}], "\n", 
        "        ", "]"}]}], ",", "\n", "      ", "n"}], "\n", "      ", 
     "]"}]}], "\n", "    ", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"tks", ":", 
      RowBox[{"TokenStreamer", "[", 
       RowBox[{"{", 
        RowBox[{
        "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
         ",", " ", "tokPuller_"}], "}"}], "]"}]}], ")"}], "@", 
    RowBox[{"\"\<Read\>\"", "[", "n_", "]"}]}], ":=", "\n", "  ", 
   RowBox[{"WithTokenizerCheckpoint", "[", "\n", "    ", 
    RowBox[{"stream", ",", "\n", "    ", 
     RowBox[{"TokenStreamerRead", "[", 
      RowBox[{"tks", ",", " ", "n"}], "]"}]}], "\n", "    ", "]"}]}], 
  ";"}], "\n", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"tks", ":", 
       RowBox[{"TokenStreamer", "[", 
        RowBox[{"{", 
         RowBox[{
         "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
          ",", " ", "tokPuller_"}], "}"}], "]"}]}], ")"}], "@", 
     RowBox[{"\"\<Read\>\"", "[", "]"}]}], ":=", "\n", "   ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"tks", "@", 
       RowBox[{"\"\<Read\>\"", "[", "1", "]"}]}], ")"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "\n", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"tks", ":", 
       RowBox[{"TokenStreamer", "[", 
        RowBox[{"{", 
         RowBox[{
         "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
          ",", " ", "tokPuller_"}], "}"}], "]"}]}], ")"}], "@", 
     RowBox[{"\"\<Peek\>\"", "[", "n_", "]"}]}], ":=", "\n", "   ", 
    RowBox[{"WithTokenizerCheckpoint", "[", "\n", "     ", 
     RowBox[{"stream", ",", "\n", "     ", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ResetTokenizerCheckpoint", "[", "stream", "]"}], ";", " ", 
          "#"}], ")"}], "&"}], "@", 
       RowBox[{"TokenStreamerRead", "[", 
        RowBox[{"tks", ",", " ", "n"}], "]"}]}]}], "\n", "     ", "]"}]}], 
   ";"}]}], "\n", 
 RowBox[{"  ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"tks", ":", 
       RowBox[{"TokenStreamer", "[", 
        RowBox[{"{", 
         RowBox[{
         "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
          ",", " ", "tokPuller_"}], "}"}], "]"}]}], ")"}], "@", 
     RowBox[{"\"\<Peek\>\"", "[", "]"}]}], ":=", "\n", "   ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"tks", "@", 
       RowBox[{"\"\<Peek\>\"", "[", "1", "]"}]}], ")"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], 
   ";"}]}]}], \
"CodeInput",ExpressionUUID->"11b74b48-51f4-4fb5-ab28-5876af214852"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenRead\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"19fea12e-de2d-4485-9573-3e772c595998"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenPuller\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"849502bc-34fa-44bc-a69c-84e8d215c3a1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"tokenPuller", "[", "tokens_", "]"}], ":=", "\n", "  ", 
   RowBox[{"tokenPuller", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{
       RowBox[{"Keys", "[", "tokens", "]"}], ",", " ", "None"}], "]"}], ",", 
     " ", "\n", "    ", 
     RowBox[{"Min", "[", 
      RowBox[{"StringLength", "/@", 
       RowBox[{"Select", "[", 
        RowBox[{"tokens", ",", " ", "StringQ"}], "]"}]}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"tokenPuller", "[", 
     RowBox[{"tokSet_", ",", " ", "min_"}], "]"}], "[", "stream_", "]"}], ":=",
    "\n", "  ", 
   RowBox[{"pullTokenToo", "[", 
    RowBox[{"stream", ",", " ", "tokSet", ",", " ", "min"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"pullTokenToo", "[", 
   RowBox[{"stream_", ",", " ", "tokSet_", ",", " ", "minTok_"}], "]"}], ":=",
   "\n", "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"tok", "=", 
       RowBox[{"ReadList", "[", 
        RowBox[{"stream", ",", " ", "Character", ",", " ", "minTok"}], 
        "]"}]}], ",", " ", "tmp"}], "}"}], ",", "\n", "    ", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"AllTrue", "[", 
        RowBox[{"tok", ",", " ", "StringQ"}], "]"}], ",", "\n", "      ", 
       RowBox[{"tok", " ", "=", " ", 
        RowBox[{"StringJoin", "[", "tok", "]"}]}], ",", "\n", "      ", 
       RowBox[{"Return", "[", 
        RowBox[{"EndOfFile", ",", " ", "Module"}], "]"}]}], "\n", "      ", 
      "]"}], ";", "\n", "    ", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"KeyExistsQ", "[", 
         RowBox[{"tokSet", ",", " ", "tok"}], "]"}]}], ",", "\n", "      ", 
       RowBox[{
        RowBox[{"tmp", " ", "=", " ", 
         RowBox[{"Read", "[", 
          RowBox[{"stream", ",", " ", "Character"}], "]"}]}], ";", "\n", 
        "      ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tmp", "===", "EndOfFile"}], ",", " ", 
          RowBox[{"Return", "[", 
           RowBox[{"EndOfFile", ",", " ", "Module"}], "]"}]}], "]"}], ";", 
        "\n", "      ", 
        RowBox[{"tok", " ", "=", " ", 
         RowBox[{"tok", "<>", "tmp"}]}], ";"}]}], "\n", "      ", "]"}], ";", 
     "\n", "    ", "tok"}]}], "\n", "    ", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"a1995aee-3280-4f6f-a43f-b890b5162c31"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenRead\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"69ea5bd1-cdba-4876-b5e1-7b3ebe4bb1b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tokenRead", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", "\n",
    "  ", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}], "@", 
    RowBox[{"\"\<Read\>\"", "[", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"a3fb35a7-b5d1-47b7-9e88-62c2bbda5a06"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenPeek\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"9a17c83f-8e13-41ea-9a18-c868f8afd33a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tokenRead", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", "\n",
    "  ", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}], "@", 
    RowBox[{"\"\<Peek\>\"", "[", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"5611fb50-26cc-4b9c-a7db-078d3a1ac235"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenReadList\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"595926a3-1875-4a7c-839c-5dfc263408ac"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]old\[RightFloor]", "CodeSubsubsubsubsection",
 Evaluatable->True,ExpressionUUID->"6e330080-212a-415f-be7c-680074d8157d"],

Cell["\<\
\[LeftCeiling]
\tRealized this won\[CloseCurlyQuote]t work as the Handler gets applied too \
late...
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"4503f127-d2e0-4396-b437-4666cab78367"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"otokenReadList", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "n_"}], "]"}], ":=", "\n",
    "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
      "body", ",", " ", "token", ",", " ", "final", ",", " ", "strPos", ",", 
       "\n", "        ", 
       RowBox[{"handlers", "=", 
        RowBox[{"spec", "[", "\"\<Handlers\>\"", "]"}]}], ",", " ", "\n", 
       "        ", 
       RowBox[{"seps", "=", 
        RowBox[{"spec", "[", "\"\<Characters\>\"", "]"}]}], ",", "\n", 
       "        ", "nullHandle", ",", " ", "read"}], "\n", "        ", "}"}], 
     ",", "\n", "    ", 
     RowBox[{
      RowBox[{"body", " ", "=", " ", "\n", "      ", 
       RowBox[{"ReadList", "[", 
        RowBox[{
        "stream", ",", " ", "Record", ",", " ", "n", ",", "\n", "        ", 
         RowBox[{"RecordSeparators", "\[Rule]", "seps"}]}], "\n", "        ", 
        "]"}]}], ";", "\n", "    ", 
      RowBox[{"body", " ", "=", " ", 
       RowBox[{"PadRight", "[", 
        RowBox[{"body", ",", " ", "n", ",", " ", "EndOfFile"}], "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"final", " ", "=", " ", 
       RowBox[{"Read", "[", 
        RowBox[{"stream", ",", " ", "Character"}], "]"}]}], ";", "\n", "    ", 
      RowBox[{"strPos", " ", "=", " ", 
       RowBox[{"Pick", "[", 
        RowBox[{
         RowBox[{"Range", "[", "n", "]"}], ",", " ", 
         RowBox[{"StringQ", "/@", "body"}]}], "]"}]}], ";", "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "@", "strPos"}], " ", "<", " ", "2"}], ",", "\n", 
        "      ", 
        RowBox[{
         RowBox[{"nullHandle", " ", "=", " ", 
          RowBox[{"Lookup", "[", 
           RowBox[{
           "handlers", ",", " ", "EndOfFile", ",", " ", "LexerToken"}], 
           "]"}]}], ";", "\n", "      ", 
         RowBox[{"Return", "[", "\n", "        ", 
          RowBox[{
           RowBox[{"Map", "[", "\n", "          ", 
            RowBox[{
             RowBox[{
              RowBox[{"nullHandle", "[", "\n", "            ", 
               RowBox[{
               "stream", ",", "\n", "            ", "#", ",", "\n", 
                "            ", "EndOfFile"}], "\n", "            ", "]"}], 
              "&"}], ",", "\n", "          ", "body"}], "\n", "          ", 
            "]"}], ",", " ", "\n", "        ", "Module"}], "\n", "        ", 
          "]"}]}]}], "\n", "      ", "]"}], ";", "\n", "    ", 
      RowBox[{"strPos", " ", "=", " ", 
       RowBox[{"Rest", "@", "strPos"}]}], ";", "\n", "    ", 
      RowBox[{"token", " ", "=", " ", 
       RowBox[{"StringTake", "[", 
        RowBox[{
         RowBox[{"body", "[", 
          RowBox[{"[", "strPos", "]"}], "]"}], ",", " ", "1"}], "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"n", "-", 
          RowBox[{"Max", "[", "strPos", "]"}]}], ">", "0"}], ",", "\n", 
        "      ", 
        RowBox[{"token", " ", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"token", ",", " ", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{"EndOfFile", ",", " ", 
             RowBox[{"n", "-", 
              RowBox[{"Max", "[", "strPos", "]"}]}]}], "]"}]}], "]"}]}]}], 
       "\n", "      ", "]"}], ";", "\n", "    ", 
      RowBox[{"token", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{"token", ",", " ", "final"}], "]"}]}], ";", "\n", "    ", 
      RowBox[{"MapThread", "[", "\n", "      ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"stream", ",", " ", "#2", ",", " ", "#3"}], "]"}], "&"}], 
        ",", "\n", "      ", 
        RowBox[{"{", "\n", "        ", 
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{"handlers", ",", " ", "token", ",", " ", "LexerToken"}], 
           "]"}], ",", "\n", "        ", "body", ",", "\n", "        ", 
          "token"}], "\n", "        ", "}"}]}], "\n", "      ", "]"}]}]}], 
    "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"1b712342-447e-4e16-ba6e-6cdf905d834c"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]new\[RightFloor]", "CodeSubsubsubsubsection",
 Evaluatable->True,ExpressionUUID->"b2ce1a34-3c96-4dde-8dfa-5c4e0599a7fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tokenReadList", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "n_", ",", " ", "t_"}], 
    "]"}], ":=", "\n", "  ", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}], "@", 
    RowBox[{"\"\<Read\>\"", "[", "n", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"b3c7d257-b28f-4036-8400-310093f00440"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenPeekList\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"f7749693-c8bc-4e33-88a1-4663425d6a59"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tokenPeekList", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "n_", ",", " ", "t_"}], 
    "]"}], ":=", "\n", "  ", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}], "@", 
    RowBox[{"\"\<Peek\>\"", "[", "n", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"32acca3d-9cc4-4622-a48c-4be75047028f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenRead\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"2ad70cfc-b2f1-4bb5-ba0f-5736389c2672"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]prepTokenHandlers\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"f4285a6c-bf23-42f3-8e73-a814ea207aa4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"prepTokenHandler", "//", "Clear"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"prepTokenHandler", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Stream\>\"", ",", " ", "char_", ",", " ", "escape___"}], 
     "}"}], "]"}], ":=", 
   RowBox[{"readString", "[", 
    RowBox[{"char", ",", " ", "escape"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"prepTokenHandler", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<LookAhead\>\"", ",", " ", "dispatch_"}], "}"}], "]"}], ":=", 
   RowBox[{"readLookAhead", "[", "dispatch", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"prepTokenHandler", "[", "e_", "]"}], ":=", "e"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"e0e4aa43-fd8d-40a7-9bc0-59ad3b64390e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prepTokenHandlers", "[", "tokens_", "]"}], ":=", "\n", "  ", 
  RowBox[{"ReplacePart", "[", "\n", "    ", 
   RowBox[{"tokens", ",", "\n", "    ", 
    RowBox[{"\"\<Handlers\>\"", "->", "\n", "      ", 
     RowBox[{"Join", "[", "\n", "        ", 
      RowBox[{
       RowBox[{"<|", "\n", "          ", 
        RowBox[{"EndOfFile", "\[Rule]", "LexerToken"}], "\n", "          ", 
        "|>"}], ",", "\n", "        ", 
       RowBox[{"Map", "[", "\n", "          ", 
        RowBox[{"prepTokenHandler", ",", "\n", "          ", 
         RowBox[{"tokens", "[", "\"\<Handlers\>\"", "]"}]}], "\n", 
        "          ", "]"}]}], "\n", "        ", "]"}]}]}], "\n", "    ", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"e19bb906-e99f-4995-aa1d-44f4069db704"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenRead\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"d227ec4c-185f-405a-8a93-361861793435"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TokenRead", "[", 
    RowBox[{"t_TokenStream", ",", " ", 
     RowBox[{"n", ":", 
      RowBox[{"_Integer", "?", "Positive"}], ":", "1"}]}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"stream", "=", 
        RowBox[{"t", "[", "\"\<Stream\>\"", "]"}]}], ",", " ", 
       RowBox[{"spec", "=", 
        RowBox[{"prepTokenHandlers", "@", 
         RowBox[{"t", "[", "\"\<Tokens\>\"", "]"}]}]}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", ">", "1"}], ",", " ", "\n", "        ", 
       RowBox[{"tokenReadList", "[", 
        RowBox[{"stream", ",", " ", "spec", ",", " ", "n", ",", " ", "t"}], 
        "]"}], ",", "\n", "        ", 
       RowBox[{"tokenRead", "[", 
        RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}]}], "\n", 
      "        ", "]"}]}], "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"51ba3928-62b6-4a47-af13-100e57d532cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenRead\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"0027233c-d400-427d-9924-3952792cb605"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TokenPeek", "[", 
    RowBox[{"t_TokenStream", ",", " ", 
     RowBox[{"n", ":", 
      RowBox[{"_Integer", "?", "Positive"}], ":", "1"}]}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"stream", "=", 
        RowBox[{"t", "[", "\"\<Stream\>\"", "]"}]}], ",", " ", 
       RowBox[{"spec", "=", 
        RowBox[{"prepTokenHandlers", "@", 
         RowBox[{"t", "[", "\"\<Tokens\>\"", "]"}]}]}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", ">", "1"}], ",", " ", "\n", "      ", 
       RowBox[{"tokenPeekList", "[", 
        RowBox[{"stream", ",", " ", "spec", ",", " ", "n", ",", " ", "t"}], 
        "]"}], ",", "\n", "      ", 
       RowBox[{"tokenPeek", "[", 
        RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}]}], "\n", 
      "      ", "]"}]}], "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"86097e29-e869-4103-803a-2d6c8a8d2a69"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"ee2ffcde-e598-4171-a288-\
aa5790f6d202"]
}, Open  ]],

Cell["", "SectionSeparator",ExpressionUUID->"0ecdfdb3-1866-464c-9665-\
07342b0a5b70"]
},
NotebookEventActions->{{"MenuCommand", "Save"} :> 
  EasyIDE`Notebooks`Manipulation`IDESave[
    EvaluationNotebook[]], PassEventsDown -> True, EvaluationOrder -> After},
WindowSize->{808, 755},
WindowMargins->{{43, Automatic}, {Automatic, 0}},
WindowTitle->"EasyIDE: LexParse",
TaggingRules->{
 "IndentCharacter" -> "  ", 
  "EasyIDE" -> {
   "Tabs" -> {
     "PacletInfo" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/PacletInfo.m"}, 
      "Lexer" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/Lexer/Lexer.nb"}, 
      "Tokens" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/Lexer/Tokens.nb"}, 
      "Parser" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/Parser/Parser.nb"}, 
      "AST" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/AST/AST.nb"}, 
      "ASTObject" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/ASTObject.nb"}, 
      "ParserObject" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/ParserObject.nb"}, 
      "EBNF" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/Parser/EBNF.nb"}}, 
    "FileViewer" -> {"Visible" -> False}, "Toolbars" -> {"Column" -> GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 ButtonBox[
                 "\"Load Package\"", ButtonFunction :> 
                  EasyIDE`Plugins`CodePackageToolbar`loadPackage[], 
                  Appearance -> Inherited, Evaluator -> Automatic, Method -> 
                  "Preemptive"], "ToolbarElement"], 
                StyleBox[
                 ButtonBox[
                 "\"Open Package\"", ButtonFunction :> 
                  EasyIDE`Plugins`CodePackageToolbar`openPackage[], 
                  Appearance -> Inherited, Evaluator -> Automatic, Method -> 
                  "Preemptive"], "ToolbarElement"], 
                StyleBox[
                 ActionMenuBox[
                  ButtonBox[
                  "\"Insert\"", ButtonFunction :> {}, Evaluator -> None, 
                   BaseStyle -> "PluginMenu", Appearance -> Inherited, 
                   FrameMargins -> {{10, 10}, {0, 0}}, 
                   ImageSize -> {Automatic, 28}, Method -> "Preemptive"], {
                  "\"Package\"" :> FrontEndExecute[
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], {
                    Cell["Package Name", "CodeSection"], 
                    Cell[
                    "\[LeftCeiling]\n  Package description\n\[RightFloor]", 
                    "Text", Evaluatable -> True], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
                    "InputSection"], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"End", "[", "]"}], ";"}]], "InputSection"], 
                    Cell["", "SectionSeparator"]}]]}, Appearance -> None, 
                  MenuAppearance -> "Dropdown"], "ToolbarElement"]}}, 
              BaseStyle -> "ToolbarElementRow"], 
             ButtonBox[
             "", BaseStyle -> "ToolbarCloseButton", ButtonData -> 
              "CodePackage"]}}, BaseStyle -> "ToolbarCell"]}}, BaseStyle -> 
        "Toolbars"], "Tags" -> {"CodePackage"}, 
      "Cells" -> {"CodePackage" -> GridBox[{{
            GridBox[{{
               StyleBox[
                ButtonBox[
                "\"Load Package\"", ButtonFunction :> 
                 EasyIDE`Plugins`CodePackageToolbar`loadPackage[], Appearance -> 
                 Inherited, Evaluator -> Automatic, Method -> "Preemptive"], 
                "ToolbarElement"], 
               StyleBox[
                ButtonBox[
                "\"Open Package\"", ButtonFunction :> 
                 EasyIDE`Plugins`CodePackageToolbar`openPackage[], Appearance -> 
                 Inherited, Evaluator -> Automatic, Method -> "Preemptive"], 
                "ToolbarElement"], 
               StyleBox[
                ActionMenuBox[
                 ButtonBox[
                 "\"Insert\"", ButtonFunction :> {}, Evaluator -> None, 
                  BaseStyle -> "PluginMenu", Appearance -> Inherited, 
                  FrameMargins -> {{10, 10}, {0, 0}}, 
                  ImageSize -> {Automatic, 28}, Method -> "Preemptive"], {
                 "\"Package\"" :> FrontEndExecute[
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], {
                    Cell["Package Name", "CodeSection"], 
                    Cell[
                    "\[LeftCeiling]\n  Package description\n\[RightFloor]", 
                    "Text", Evaluatable -> True], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
                    "InputSection"], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"End", "[", "]"}], ";"}]], "InputSection"], 
                    Cell["", "SectionSeparator"]}]]}, Appearance -> None, 
                 MenuAppearance -> "Dropdown"], "ToolbarElement"]}}, 
             BaseStyle -> "ToolbarElementRow"], 
            ButtonBox[
            "", BaseStyle -> "ToolbarCloseButton", ButtonData -> 
             "CodePackage"]}}, BaseStyle -> "ToolbarCell"]}}, 
    "Project" -> {
     "Directory" -> 
      "/Users/Mark/Documents/Wolfram Mathematica/Applications/LexParse/"}, 
    "MainStyleName" -> "DarkGUI", "ActiveTab" -> "Tokens", "StyleSheet" -> 
    FrontEnd`FileName[{"EasyIDE", "Extensions", "DarkGUI"}, "CodePackage.nb"],
     "FileToolbar" -> "CodePackage", 
    "Options" -> {
     FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
      StyleDefinitions -> 
      FrontEnd`FileName[{"BTools"}, "CodePackage.nb", CharacterEncoding -> 
        "UTF-8"]}, "AutoGeneratePackage" -> True, "SavingAction" -> None}},
DynamicUpdating->Automatic,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"EasyIDE", "Extensions", "DarkGUI"}, 
       "CodePackage.nb"]]]}, Visible -> False, 
  TaggingRules -> {"EasyIDE" -> {"FileViewer" -> {"Visible" -> False}}}, 
  FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]

