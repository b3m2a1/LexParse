Notebook[{

Cell[CellGroupData[{
Cell["\[LeftCeiling]Tokens\[RightFloor]", "CodeSection",
 Evaluatable->True,ExpressionUUID->"3f35cdae-7330-4a76-973f-7b0afbf3eec1"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TokenStream", "::", "usage"}], "=", 
   "\"\<An object representing a stream of tokens\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"7fe3c56f-27c2-471d-bcd4-d56ba39acc49"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetTokenizerCheckpoint", "::", "usage"}], "=", 
   "\"\<Sets the Tokenizer checkpoint\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ResetTokenizerCheckpoint", "::", "usage"}], "=", 
   "\"\<Reverts the Tokenizer checkpoint\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WithTokenizerCheckpoint", "::", "usage"}], "=", 
   "\"\<Wrapper for tokenizing\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"1130a0bf-140c-45c0-81ed-d6afb63fb43e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TokenRead", "::", "usage"}], "=", 
   "\"\<Pulls n tokens out of a TokenStream\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TokenStreamer", "::", "usage"}], "=", 
   "\"\<Lower-level object for faster token streaming\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"559d1a2c-0577-4a15-942c-914ff819dbcc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"419e5847-6107-4309-b404-\
7e57bae0d75d"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenStream\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"eaf6eaeb-1b3f-45cc-a7d3-44ca1d677095"],

Cell[BoxData[
 RowBox[{"RegisterInterface", "[", "\n", "  ", 
  RowBox[{"TokenStream", ",", "\n", "  ", 
   RowBox[{"{", "\n", "    ", 
    RowBox[{"\"\<Tokens\>\"", ",", "\n", "    ", "\"\<Stream\>\""}], "\n", 
    "    ", "}"}], ",", "\n", "  ", 
   RowBox[{"\"\<Constructor\>\"", "\[Rule]", "buildTokenStream"}]}], "\n", 
  "  ", "]"}]], \
"CodeInput",ExpressionUUID->"a680d79a-321d-4008-aa76-098733b8bf13"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]buildTokenStream\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"dd2302bc-da42-4a02-8e17-f1f4009a187e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l_LexerObject", ",", " ", "i_InputStream"}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Tokens\>\"", "\[Rule]", 
      RowBox[{"l", "[", "\"\<Tokens\>\"", "]"}]}], ",", " ", 
     RowBox[{"\"\<Stream\>\"", "\[Rule]", "i"}]}], "|>"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l_LexerObject", ",", " ", 
     RowBox[{"s_String", "?", 
      RowBox[{"(", 
       RowBox[{"Not", "@*", "FileExistsQ"}], ")"}]}]}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l", ",", " ", 
     RowBox[{"StringToStream", "[", "s", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l_LexerObject", ",", " ", 
     RowBox[{"s_String", "?", 
      RowBox[{"(", "FileExistsQ", ")"}]}]}], "]"}], ":=", "\n", " ", 
   RowBox[{"buildTokenStream", "[", 
    RowBox[{"l", ",", " ", 
     RowBox[{"OpenRead", "[", "s", "]"}]}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"9a959326-7091-47f8-980d-393402df0d72"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Methods\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"ebde2525-8ede-41f0-948f-23f48a79bd47"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InterfaceMethod", "[", "TokenStream", "]"}], "@", "\n", "  ", 
    RowBox[{
     RowBox[{"t_TokenStream", "[", "\"\<Read\>\"", "]"}], "[", 
     RowBox[{"n", ":", 
      RowBox[{"_Integer", "?", "Positive"}], ":", "1"}], "]"}]}], ":=", "\n", 
   "    ", 
   RowBox[{"TokenRead", "[", 
    RowBox[{"t", ",", " ", "n"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InterfaceMethod", "[", "TokenStream", "]"}], "@", "\n", "  ", 
    RowBox[{
     RowBox[{"t_TokenStream", "[", "\"\<Streamer\>\"", "]"}], "[", "]"}]}], ":=",
    "\n", "    ", 
   RowBox[{"TokenStreamer", "[", "t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"InterfaceMethod", "[", "TokenStream", "]"}], "@", "\n", "  ", 
    RowBox[{
     RowBox[{"t_TokenStream", "[", "\"\<Close\>\"", "]"}], "[", "]"}]}], ":=",
    "\n", "    ", 
   RowBox[{"Close", "@", 
    RowBox[{"t", "[", "\"\<Stream\>\"", "]"}]}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"de60faf0-e9f3-4be1-bfe3-5c5f373fb2ac"]\

}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenRead\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"63bb8490-7140-487f-9033-b36679b7a4a4"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]$checkpoints\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"abb07a61-51ac-4f80-90cc-f9f812e77e9e"],

Cell["\<\
\[LeftCeiling]
\tMight be better to do with Language`ExpressionStore ?
\tWe\[CloseCurlyQuote]re gonna manage this under the assumption that if you \
peek ahead and then reset you want to be able to jump back to where you were \
post peek...?
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"67b1581b-4397-4efb-8836-cc78e12afb38"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"!", 
     RowBox[{"AssociationQ", "[", "$checkpoints", "]"}]}], ",", " ", 
    RowBox[{"$checkpoints", "=", 
     RowBox[{"<|", "|>"}]}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"!", 
     RowBox[{"AssociationQ", "[", "$peekpoints", "]"}]}], ",", " ", 
    RowBox[{"$peekpoints", "=", 
     RowBox[{"<|", "|>"}]}]}], "]"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"f0a6e635-cd24-4318-8e89-e7a1b3bcd479"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SetTokenizerCheckpoint", "[", 
    RowBox[{"stream_InputStream", ",", " ", 
     RowBox[{"dir", ":", 
      RowBox[{"\"\<Forward\>\"", "|", "\"\<Backward\>\""}], ":", 
      "\"\<Backward\>\""}]}], "]"}], ":=", "\n", "  ", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"dir", "===", "\"\<Backward\>\""}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"$checkpoints", "[", "stream", "]"}], " ", "=", " ", 
      RowBox[{"StreamPosition", "[", "stream", "]"}]}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"$peekpoints", "[", "stream", "]"}], " ", "=", " ", 
      RowBox[{"StreamPosition", "[", "stream", "]"}]}]}], "\n", "    ", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SetTokenizerCheckpoint", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"TokenStreamer", "[", 
      RowBox[{"{", 
       RowBox[{
       "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
        ",", " ", "tokPuller_"}], "}"}], "]"}], ",", " ", "\n", "  ", 
     RowBox[{"dir", ":", 
      RowBox[{"\"\<Forward\>\"", "|", "\"\<Backward\>\""}], ":", 
      "\"\<Backward\>\""}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"SetTokenizerCheckpoint", "[", 
    RowBox[{"stream", ",", " ", "dir"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SetTokenizerCheckpoint", "[", "\n", "  ", 
    RowBox[{"t_TokenStream", ",", " ", "\n", "  ", 
     RowBox[{"dir", ":", 
      RowBox[{"\"\<Forward\>\"", "|", "\"\<Backward\>\""}], ":", 
      "\"\<Backward\>\""}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"SetTokenizerCheckpoint", "[", 
    RowBox[{
     RowBox[{"t", "[", "\"\<Stream\>\"", "]"}], ",", " ", "dir"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"f51f440e-babc-43e1-b036-49c4d8e31f36"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ResetTokenizerCheckpoint", "[", 
    RowBox[{"stream_InputStream", ",", " ", 
     RowBox[{"dir", ":", 
      RowBox[{"\"\<Forward\>\"", "|", "\"\<Backward\>\""}], ":", 
      "\"\<Backward\>\""}]}], "]"}], ":=", "\n", "  ", 
   RowBox[{"SetStreamPosition", "[", 
    RowBox[{"stream", ",", " ", "\n", "    ", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"dir", "===", "\"\<Backward\>\""}], ",", "\n", "      ", 
        "$checkpoints", ",", "\n", "      ", "$peekpoints"}], "\n", "      ", 
       "]"}], "[", "stream", "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ResetTokenizerCheckpoint", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"TokenStreamer", "[", 
      RowBox[{"{", 
       RowBox[{
       "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
        ",", " ", "tokPuller_"}], "}"}], "]"}], ",", " ", "\n", "  ", 
     RowBox[{"dir", ":", 
      RowBox[{"\"\<Forward\>\"", "|", "\"\<Backward\>\""}], ":", 
      "\"\<Backward\>\""}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"ResetTokenizerCheckpoint", "[", 
    RowBox[{"stream", ",", " ", "dir"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ResetTokenizerCheckpoint", "[", "\n", "  ", 
    RowBox[{"t_TokenStream", ",", " ", "\n", "  ", 
     RowBox[{"dir", ":", 
      RowBox[{"\"\<Forward\>\"", "|", "\"\<Backward\>\""}], ":", 
      "\"\<Backward\>\""}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"ResetTokenizerCheckpoint", "[", 
    RowBox[{
     RowBox[{"t", "[", "\"\<Stream\>\"", "]"}], ",", " ", "dir"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"7ffca885-a3a6-4576-800f-8104cb1d11a8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"WithTokenizerCheckpoint", "[", 
    RowBox[{"stream_InputStream", ",", " ", "expr_"}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Block", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
       RowBox[{"$checkpoints", " ", "=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"AssociationQ", "[", "$checkpoints", "]"}]}], ",", " ", 
          RowBox[{"<|", "|>"}], ",", " ", "$checkpoints"}], "]"}]}], ",", 
       "\n", "      ", 
       RowBox[{"$peekpoints", " ", "=", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"AssociationQ", "[", "$peekpoints", "]"}]}], ",", " ", 
          RowBox[{"<|", "|>"}], ",", " ", "$peekpoints"}], "]"}]}]}], "\n", 
      "      ", "}"}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"SetTokenizerCheckpoint", "[", "stream", "]"}], ";", "\n", 
      "    ", "expr"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WithTokenizerCheckpoint", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"TokenStreamer", "[", 
      RowBox[{"{", 
       RowBox[{
       "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
        ",", " ", "tokPuller_"}], "}"}], "]"}], ",", " ", "\n", "  ", 
     "expr_"}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"WithTokenizerCheckpoint", "[", 
    RowBox[{"stream", ",", " ", "expr"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WithTokenizerCheckpoint", "[", "\n", "  ", 
    RowBox[{"t_TokenStream", ",", " ", "\n", "  ", "expr_"}], "\n", "  ", 
    "]"}], ":=", "\n", "  ", 
   RowBox[{"WithTokenizerCheckpoint", "[", 
    RowBox[{
     RowBox[{"t", "[", "\"\<Stream\>\"", "]"}], ",", " ", "expr"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"WithTokenizerCheckpoint", "~", "SetAttributes", "~", "HoldRest"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"170bf740-c08b-40b6-9a73-e6a6af346c91"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]readStringToken\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"5cac4d9f-4716-41b4-ae71-1f1f1271432d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"readStringToken", "[", 
    RowBox[{"tok_", ",", " ", 
     RowBox[{"escape_:", "\"\<\\\\\>\""}]}], "]"}], "[", 
   RowBox[{"stream_", ",", " ", "body_", ",", " ", "token_"}], "]"}], ":=", 
  "\n", "  ", 
  RowBox[{"Module", "[", "\n", "    ", 
   RowBox[{
    RowBox[{"{", "\n", "      ", 
     RowBox[{"tmp", ",", "\n", "      ", 
      RowBox[{"str", " ", "=", " ", 
       RowBox[{"Read", "[", 
        RowBox[{"stream", ",", " ", "Record", ",", " ", 
         RowBox[{"RecordSeparators", "\[Rule]", 
          RowBox[{"{", "tok", "}"}]}]}], "]"}]}]}], "\n", "      ", "}"}], 
    ",", "\n", "    ", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"StringQ", "[", "str", "]"}], "&&", 
        RowBox[{"StringEndsQ", "[", 
         RowBox[{"str", ",", " ", "escape"}], "]"}]}], ",", "\n", "      ", 
       RowBox[{
        RowBox[{"tmp", " ", "=", " ", 
         RowBox[{"Read", "[", 
          RowBox[{"stream", ",", " ", "Record", ",", " ", 
           RowBox[{"RecordSeparators", "\[Rule]", 
            RowBox[{"{", "tok", "}"}]}]}], "]"}]}], ";", "\n", "      ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tmp", "===", "EndOfFile"}], ",", " ", 
          RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\n", "      ", 
        RowBox[{"str", " ", "=", " ", 
         RowBox[{"str", "<>", "tok", "<>", "tmp"}]}], ";"}]}], "\n", "      ",
       "]"}], ";", "\n", "    ", "str"}]}], "\n", "    ", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"912933c3-0e17-4af5-a987-f23424147d62"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]readLookAhead\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"47eb3a86-6196-4e23-a0cd-3f0c24e01de0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"readLookAhead", "[", "lookAheadDispatcher_", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"readLookAhead", "[", 
    RowBox[{"lookAheadDispatcher", ",", " ", 
     RowBox[{"tokenPuller", "[", 
      RowBox[{"Keys", "[", "lookAheadDispatcher", "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"readLookAhead", "[", 
    RowBox[{"lookAheadDispatcher_", ",", " ", "tokenPuller_"}], "]"}], "[", 
   RowBox[{"stream_", ",", " ", "body_", ",", " ", "token_"}], "]"}], ":=", 
  "\n", "  ", 
  RowBox[{
   RowBox[{"lookAheadDispatcher", "[", 
    RowBox[{"tokenPuller", "[", "stream", "]"}], "]"}], "[", 
   RowBox[{"stream", ",", " ", "body", ",", " ", "token"}], 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"7cd7decc-6cd0-40e8-b2c7-7fd299aa0cac"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenStreamer\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"defa817f-8e13-4331-8a92-df0529d5e1ac"],

Cell["\<\
\[LeftCeiling]
\tDesigned to be as minimal overhead as can still be convenient
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"31cd0b26-1ace-48e7-af06-9a40bf3d528a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TokenStreamer", "[", "t_TokenStream", "]"}], ":=", "\n", "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"stream", "=", 
        RowBox[{"t", "[", "\"\<Stream\>\"", "]"}]}], ",", " ", 
       RowBox[{"spec", "=", 
        RowBox[{"prepTokenHandlers", "@", 
         RowBox[{"t", "[", "\"\<Tokens\>\"", "]"}]}]}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"TokenStreamer", "[", 
      RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TokenStreamer", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", "\n",
    "  ", 
   RowBox[{"TokenStreamer", "[", 
    RowBox[{"{", "\n", "    ", 
     RowBox[{"t", ",", "\n", "    ", "stream", ",", "\n", "    ", 
      RowBox[{"spec", "[", "\"\<Handlers\>\"", "]"}], ",", " ", "\n", "    ", 
      
      RowBox[{"spec", "[", "\"\<Characters\>\"", "]"}], ",", "\n", "    ", 
      RowBox[{"tokenPuller", "[", 
       RowBox[{"spec", "[", "\"\<Characters\>\"", "]"}], "]"}]}], "\n", 
     "    ", "}"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"9e819523-0199-44e0-ade8-74e67dc152fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TokenStreamerRead", "[", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"{", 
      RowBox[{
      "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
       ",", " ", "tokPuller_"}], "}"}], "]"}], ",", " ", "n_"}], "]"}], ":=", 
  "\n", "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"body", ",", " ", "tmp", ",", " ", "token", ",", " ", "spos"}], 
     "}"}], ",", "\n", "    ", 
    RowBox[{"Table", "[", "\n", "      ", 
     RowBox[{
      RowBox[{
       RowBox[{"token", " ", "=", " ", "$Failed"}], ";", "\n", "      ", 
       RowBox[{"body", " ", "=", " ", "EndOfFile"}], ";", "\n", "      ", 
       RowBox[{"While", "[", 
        RowBox[{
         RowBox[{"token", "===", "$Failed"}], ",", "\n", "        ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StreamPosition", "[", "stream", "]"}], "==", "0"}], ",", 
           "\n", "  ", "        ", 
           RowBox[{"(*", " ", "\n", "  ", "                    ", 
            RowBox[{
            "we", " ", "need", " ", "a", " ", "secondary", " ", "handling", 
             " ", "mechanism", " ", "to", " ", "ensure", "\n", "  ", 
             "                      ", "that", " ", "we", " ", 
             RowBox[{"don", "'"}], "t", " ", "miss", " ", "tokens", " ", "at",
              " ", "the", " ", "very", " ", "start", " ", "of", " ", "the", 
             " ", "stream"}], "\n", "  ", "                    ", "*)"}], 
           "\n", "          ", 
           RowBox[{
            RowBox[{"tmp", " ", "=", " ", "\n", "           ", 
             RowBox[{"Read", "[", 
              RowBox[{
              "stream", ",", " ", "Record", ",", "\n", "  ", "  ", "  ", 
               "        ", 
               RowBox[{"RecordSeparators", "\[Rule]", "seps"}]}], "\n", "  ", 
              "            ", "]"}]}], ";", "\n", "          ", 
            RowBox[{"spos", " ", "=", " ", 
             RowBox[{"StreamPosition", "[", "stream", "]"}]}], ";", "\n", 
            "          ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"StringLength", "@", "tmp"}], "<", "spos"}], " ", 
              RowBox[{"(*", " ", 
               RowBox[{"we", " ", "skipped", " ", "a", " ", "thing"}], " ", 
               "*)"}], ",", "\n", "            ", 
              RowBox[{
               RowBox[{"SetStreamPosition", "[", 
                RowBox[{"stream", ",", " ", "0"}], "]"}], ";", "\n", 
               "            ", 
               RowBox[{"token", " ", "=", " ", 
                RowBox[{"tokPuller", "[", "stream", "]"}]}], ";", "\n", 
               "            ", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"ListQ", "@", "token"}], ",", " ", "\n", 
                 "              ", 
                 RowBox[{
                  RowBox[{"body", " ", "=", " ", 
                   RowBox[{"token", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", "  ", 
                  "            ", 
                  RowBox[{"token", " ", "=", " ", 
                   RowBox[{"token", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}]}], ",", "\n", 
                 "              ", 
                 RowBox[{
                  RowBox[{"body", " ", "=", " ", "\"\<\>\""}], ";"}]}], "\n", 
                "              ", "]"}]}]}], "\n", "            ", "]"}]}], 
           ",", "\n", "          ", 
           RowBox[{"(*", " ", 
            RowBox[{
            "standard", " ", "mechanism", " ", "a", " ", "little", " ", "bit",
              " ", "simpler"}], " ", "*)"}], "\n", "          ", 
           RowBox[{
            RowBox[{"tmp", " ", "=", " ", "\n", "           ", 
             RowBox[{"Read", "[", 
              RowBox[{
              "stream", ",", " ", "Record", ",", "\n", "  ", "  ", "  ", 
               "        ", 
               RowBox[{"RecordSeparators", "\[Rule]", "seps"}]}], "\n", "  ", 
              "            ", "]"}]}], ";", "\n", "  ", "        ", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"tmp", "===", "EndOfFile"}], ",", " ", "\n", "  ", "  ",
               "  ", "      ", 
              RowBox[{"Return", "[", "\n", "  ", "  ", "  ", "        ", 
               RowBox[{
                RowBox[{
                 RowBox[{"handlers", "[", "EndOfFile", "]"}], "[", "\n", "  ",
                  "  ", "  ", "          ", 
                 RowBox[{"t", ",", "\n", "  ", "  ", "  ", "          ", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"StringQ", "@", "body"}], ",", " ", "body", ",", 
                    " ", "EndOfFile"}], "]"}], ",", "\n", "  ", "  ", "  ", 
                  "          ", "EndOfFile"}], "\n", "  ", "  ", "  ", 
                 "          ", "]"}], ",", "\n", "  ", "            ", 
                "While"}], "\n", "  ", "            ", "]"}], ",", "\n", 
              "            ", 
              RowBox[{
               RowBox[{"token", " ", "=", " ", 
                RowBox[{"tokPuller", "[", "stream", "]"}]}], ";", "\n", "  ", 
               "          ", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"ListQ", "@", "token"}], ",", " ", "\n", "  ", 
                 "            ", 
                 RowBox[{
                  RowBox[{"tmp", " ", "=", " ", 
                   RowBox[{"tmp", " ", "<>", " ", 
                    RowBox[{"token", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], ";", "\n", "  ", 
                  "            ", 
                  RowBox[{"token", " ", "=", " ", 
                   RowBox[{"token", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "\n", "  ", 
                "            ", "]"}]}]}], "\n", "  ", "          ", "]"}], 
            ";", "\n", "  ", "        ", 
            RowBox[{"body", " ", "=", " ", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"StringQ", "@", "body"}], ",", " ", 
               RowBox[{"body", "<>", "tmp"}], ",", " ", "tmp"}], "]"}]}]}]}], 
          "\n", "          ", "]"}]}], "\n", "        ", "]"}], ";", "\n", 
       "      ", 
       RowBox[{
        RowBox[{"handlers", "[", "token", "]"}], "[", "\n", "        ", 
        RowBox[{
        "t", ",", "\n", "        ", "body", ",", "\n", "        ", "token"}], 
        "\n", "        ", "]"}]}], ",", "\n", "      ", "n"}], "\n", "      ",
      "]"}]}], "\n", "    ", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"5abc2cbf-d81c-421e-8116-b07cc2e03d58"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"(", "\n", "\t", 
     RowBox[{"tks", ":", 
      RowBox[{"HoldPattern", "[", 
       RowBox[{"TokenStreamer", "[", 
        RowBox[{"{", 
         RowBox[{
         "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_", 
          ",", " ", "tokPuller_"}], "}"}], "]"}], "]"}]}], "\n", "\t", ")"}], 
    "@", 
    RowBox[{"\"\<Read\>\"", "[", "n_", "]"}]}], ":=", "\n", "  ", 
   RowBox[{"WithTokenizerCheckpoint", "[", "\n", "    ", 
    RowBox[{"stream", ",", "\n", "    ", 
     RowBox[{"TokenStreamerRead", "[", 
      RowBox[{"tks", ",", " ", "n"}], "]"}]}], "\n", "    ", "]"}]}], 
  ";"}], "\n", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", "\n", "\t", 
      RowBox[{"tks", ":", 
       RowBox[{"HoldPattern", "[", 
        RowBox[{"TokenStreamer", "[", 
         RowBox[{"{", 
          RowBox[{
          "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_",
            ",", " ", "tokPuller_"}], "}"}], "]"}], "]"}]}], "\n", "\t", 
      ")"}], "@", 
     RowBox[{"\"\<Read\>\"", "[", "]"}]}], ":=", "\n", "   ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"tks", "@", 
       RowBox[{"\"\<Read\>\"", "[", "1", "]"}]}], ")"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "\n", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", "\n", "\t", 
      RowBox[{"tks", ":", 
       RowBox[{"HoldPattern", "[", 
        RowBox[{"TokenStreamer", "[", 
         RowBox[{"{", 
          RowBox[{
          "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_",
            ",", " ", "tokPuller_"}], "}"}], "]"}], "]"}]}], "\n", "\t", 
      ")"}], "@", 
     RowBox[{"\"\<Peek\>\"", "[", "n_", "]"}]}], ":=", "\n", "   ", 
    RowBox[{"WithTokenizerCheckpoint", "[", "\n", "     ", 
     RowBox[{"stream", ",", "\n", "     ", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"ResetTokenizerCheckpoint", "[", "stream", "]"}], ";", " ", 
          "#"}], ")"}], "&"}], "@", 
       RowBox[{"TokenStreamerRead", "[", 
        RowBox[{"tks", ",", " ", "n"}], "]"}]}]}], "\n", "     ", "]"}]}], 
   ";"}]}], "\n", 
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", "\n", "\t", 
      RowBox[{"tks", ":", 
       RowBox[{"HoldPattern", "[", 
        RowBox[{"TokenStreamer", "[", 
         RowBox[{"{", 
          RowBox[{
          "t_", ",", " ", "stream_", ",", " ", "handlers_", ",", " ", "seps_",
            ",", " ", "tokPuller_"}], "}"}], "]"}], "]"}]}], "\n", "\t", 
      ")"}], "@", 
     RowBox[{"\"\<Peek\>\"", "[", "]"}]}], ":=", "\n", "   ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"tks", "@", 
       RowBox[{"\"\<Peek\>\"", "[", "1", "]"}]}], ")"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], 
   ";"}]}]}], \
"CodeInput",ExpressionUUID->"c2b5aa27-b500-4ccf-97ec-41efbe322115"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenRead\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"925a0b1d-a7ca-457c-bd8e-2a7bb6ab3976"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenPuller\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"30b6e067-ea08-489d-9312-d1ec7406c1b4"],

Cell["\<\
\[LeftCeiling]
\tPulls the real token off the stream. 
\tHas to be a bit careful about things like \[OpenCurlyDoubleQuote]for\
\[CloseCurlyDoubleQuote] and EOFs.
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"802ab546-97a7-4167-b824-4fd0fe4b3eda"],

Cell[BoxData[{
 RowBox[{"tokenPuller", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"tokenPuller", "[", "tokens_", "]"}], ":=", "\n", "  ", 
   RowBox[{"tokenPuller", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{"tokens", ",", " ", "None"}], "]"}], ",", " ", "\n", "    ", 
     RowBox[{"Min", "[", 
      RowBox[{"StringLength", "/@", 
       RowBox[{"Select", "[", 
        RowBox[{"tokens", ",", " ", "StringQ"}], "]"}]}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"tokenPuller", "[", 
     RowBox[{"tokSet_", ",", " ", "min_"}], "]"}], "[", "stream_", "]"}], ":=",
    "\n", "  ", 
   RowBox[{"pullTokenToo", "[", 
    RowBox[{"stream", ",", " ", "tokSet", ",", " ", "min"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{"pullTokenToo", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{"pullTokenToo", "[", 
   RowBox[{"stream_", ",", " ", "tokSet_", ",", " ", "minTok_"}], "]"}], ":=",
   "\n", "  ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "gotta", " ", "figure", " ", "out", " ", "which", " ", "token", " ", "we",
      " ", "actually", " ", "got"}], "..."}], " ", "*)"}], "\n", "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tok", ",", " ", "tmp", ",", " ", "spos", ",", " ", "spos2"}], 
     "}"}], ",", "\n", "    ", 
    RowBox[{
     RowBox[{"spos", " ", "=", " ", 
      RowBox[{"StreamPosition", "[", "stream", "]"}]}], ";", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"spos", ">", "0"}], ",", "\n", "      ", 
       RowBox[{
        RowBox[{"tok", " ", "=", " ", 
         RowBox[{"Read", "[", 
          RowBox[{"stream", ",", " ", "Character"}], "]"}]}], ";", "\n", "  ",
         "    ", 
        RowBox[{"spos2", " ", "=", " ", 
         RowBox[{"StreamPosition", "[", "stream", "]"}]}], ";", "\n", "  ", 
        "    ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringMatchQ", "[", 
           RowBox[{"tok", ",", " ", "WordCharacter"}], "]"}], ",", " ", "\n", 
          "  ", "      ", 
          RowBox[{
           RowBox[{"SetStreamPosition", "[", 
            RowBox[{"stream", ",", " ", 
             RowBox[{"spos", "-", "1"}]}], "]"}], ";", "\n", "  ", "      ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"!", 
              RowBox[{"StringMatchQ", "[", 
               RowBox[{
                RowBox[{"Read", "[", 
                 RowBox[{"stream", ",", " ", "Character"}], "]"}], ",", " ", 
                "WhitespaceCharacter"}], "]"}]}], ",", "\n", "  ", "        ", 
             RowBox[{
              RowBox[{"SetStreamPosition", "[", 
               RowBox[{"stream", ",", " ", "spos2"}], "]"}], ";", "\n", "  ", 
              "        ", 
              RowBox[{"Return", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"$Failed", ",", " ", "tok"}], "}"}], ",", " ", 
                "Module"}], "]"}]}], ",", "\n", "  ", "        ", 
             RowBox[{"SetStreamPosition", "[", 
              RowBox[{"stream", ",", " ", "spos2"}], "]"}]}], "\n", "  ", 
            "        ", "]"}]}]}], "\n", "  ", "      ", "]"}], ";", " ", 
        "\n", "      ", 
        RowBox[{"tok", " ", "=", " ", 
         RowBox[{
          RowBox[{"Prepend", "[", "tok", "]"}], "@", 
          RowBox[{"ReadList", "[", 
           RowBox[{"stream", ",", " ", "Character", ",", " ", 
            RowBox[{"minTok", "-", "1"}]}], "]"}]}]}]}], ",", "\n", "      ", 
       
       RowBox[{
        RowBox[{"tok", " ", "=", " ", 
         RowBox[{"ReadList", "[", 
          RowBox[{"stream", ",", " ", "Character", ",", " ", "minTok"}], 
          "]"}]}], ";"}]}], "\n", "      ", "]"}], ";", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"AllTrue", "[", 
        RowBox[{"tok", ",", " ", "StringQ"}], "]"}], ",", "\n", "      ", 
       RowBox[{"tok", " ", "=", " ", 
        RowBox[{"StringJoin", "[", "tok", "]"}]}], ",", "\n", "      ", 
       RowBox[{"Return", "[", 
        RowBox[{"EndOfFile", ",", " ", "Module"}], "]"}]}], "\n", "      ", 
      "]"}], ";", "\n", "    ", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"KeyExistsQ", "[", 
         RowBox[{"tokSet", ",", " ", "tok"}], "]"}]}], ",", "\n", "      ", 
       RowBox[{
        RowBox[{"tmp", " ", "=", " ", 
         RowBox[{"Read", "[", 
          RowBox[{"stream", ",", " ", "Character"}], "]"}]}], ";", "\n", 
        "      ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tmp", "===", "EndOfFile"}], ",", " ", 
          RowBox[{"Return", "[", 
           RowBox[{"EndOfFile", ",", " ", "Module"}], "]"}]}], "]"}], ";", 
        "\n", "      ", 
        RowBox[{"tok", " ", "=", " ", 
         RowBox[{"tok", "<>", "tmp"}]}], ";"}]}], "\n", "      ", "]"}], ";", 
     "\n", "    ", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"StringMatchQ", "[", 
        RowBox[{
         RowBox[{"StringTake", "[", 
          RowBox[{"tok", ",", " ", 
           RowBox[{"{", "1", "}"}]}], "]"}], ",", " ", "WordCharacter"}], 
        "]"}], ",", "\n", "       ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "finally", " ", "need", " ", "to", " ", "check", " ", "that", " ", 
         "next", " ", "char", " ", 
         RowBox[{"isn", "'"}], "t", " ", "another", " ", "WordCharacter"}], 
        " ", "*)"}], "\n", "      ", 
       RowBox[{
        RowBox[{"spos2", " ", "=", " ", 
         RowBox[{"StreamPosition", "[", "stream", "]"}]}], ";", "\n", "  ", 
        "    ", 
        RowBox[{"tmp", " ", "=", " ", 
         RowBox[{"Read", "[", 
          RowBox[{"stream", ",", " ", "Character"}], "]"}]}], ";", "\n", 
        "      ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringQ", "@", "tmp"}], "&&", 
           RowBox[{"StringMatchQ", "[", 
            RowBox[{"tmp", ",", " ", "WordCharacter"}], "]"}]}], ",", "\n", 
          "        ", 
          RowBox[{
           RowBox[{"SetStreamPosition", "[", 
            RowBox[{"stream", ",", " ", "spos"}], "]"}], ";", "\n", "  ", 
           "      ", 
           RowBox[{"Return", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"$Failed", ",", " ", "tok"}], "}"}], ",", " ", 
             "Module"}], "]"}]}], ",", "\n", "  ", "      ", 
          RowBox[{"SetStreamPosition", "[", 
           RowBox[{"stream", ",", " ", "spos2"}], "]"}]}], "\n", "        ", 
         "]"}]}]}], "\n", "      ", "]"}], ";", "\n", "    ", "tok"}]}], "\n",
    "    ", "]"}]}]}], \
"CodeInput",ExpressionUUID->"03474688-eeb3-44a8-ab21-f283821e9c1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenRead\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"2adbb580-515c-4cc5-a5cc-c5466269d4bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tokenRead", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", "\n",
    "  ", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}], "@", 
    RowBox[{"\"\<Read\>\"", "[", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"0fc3b670-623f-4ed7-932b-5856113424de"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenPeek\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"adce1d32-8bd4-4f3c-8dbc-94d217392190"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tokenPeek", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", "\n",
    "  ", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}], "@", 
    RowBox[{"\"\<Peek\>\"", "[", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"6123fb71-90c3-469b-b746-c9955fa88182"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenReadList\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"c2c79500-7a42-4ae3-ab47-c360300631e3"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]old\[RightFloor]", "CodeSubsubsubsubsection",
 Evaluatable->True,ExpressionUUID->"842e4785-170b-408a-ab6d-485526c17042"],

Cell["\<\
\[LeftCeiling]
\tRealized this won\[CloseCurlyQuote]t work as the Handler gets applied too \
late...
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"aa351f24-8528-46d8-8e98-18c0f0552e4b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"otokenReadList", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "n_"}], "]"}], ":=", "\n",
    "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
      "body", ",", " ", "token", ",", " ", "final", ",", " ", "strPos", ",", 
       "\n", "        ", 
       RowBox[{"handlers", "=", 
        RowBox[{"spec", "[", "\"\<Handlers\>\"", "]"}]}], ",", " ", "\n", 
       "        ", 
       RowBox[{"seps", "=", 
        RowBox[{"spec", "[", "\"\<Characters\>\"", "]"}]}], ",", "\n", 
       "        ", "nullHandle", ",", " ", "read"}], "\n", "        ", "}"}], 
     ",", "\n", "    ", 
     RowBox[{
      RowBox[{"body", " ", "=", " ", "\n", "      ", 
       RowBox[{"ReadList", "[", 
        RowBox[{
        "stream", ",", " ", "Record", ",", " ", "n", ",", "\n", "        ", 
         RowBox[{"RecordSeparators", "\[Rule]", "seps"}]}], "\n", "        ", 
        "]"}]}], ";", "\n", "    ", 
      RowBox[{"body", " ", "=", " ", 
       RowBox[{"PadRight", "[", 
        RowBox[{"body", ",", " ", "n", ",", " ", "EndOfFile"}], "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"final", " ", "=", " ", 
       RowBox[{"Read", "[", 
        RowBox[{"stream", ",", " ", "Character"}], "]"}]}], ";", "\n", "    ", 
      RowBox[{"strPos", " ", "=", " ", 
       RowBox[{"Pick", "[", 
        RowBox[{
         RowBox[{"Range", "[", "n", "]"}], ",", " ", 
         RowBox[{"StringQ", "/@", "body"}]}], "]"}]}], ";", "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "@", "strPos"}], " ", "<", " ", "2"}], ",", "\n", 
        "      ", 
        RowBox[{
         RowBox[{"nullHandle", " ", "=", " ", 
          RowBox[{"Lookup", "[", 
           RowBox[{
           "handlers", ",", " ", "EndOfFile", ",", " ", "LexerToken"}], 
           "]"}]}], ";", "\n", "      ", 
         RowBox[{"Return", "[", "\n", "        ", 
          RowBox[{
           RowBox[{"Map", "[", "\n", "          ", 
            RowBox[{
             RowBox[{
              RowBox[{"nullHandle", "[", "\n", "            ", 
               RowBox[{
               "stream", ",", "\n", "            ", "#", ",", "\n", 
                "            ", "EndOfFile"}], "\n", "            ", "]"}], 
              "&"}], ",", "\n", "          ", "body"}], "\n", "          ", 
            "]"}], ",", " ", "\n", "        ", "Module"}], "\n", "        ", 
          "]"}]}]}], "\n", "      ", "]"}], ";", "\n", "    ", 
      RowBox[{"strPos", " ", "=", " ", 
       RowBox[{"Rest", "@", "strPos"}]}], ";", "\n", "    ", 
      RowBox[{"token", " ", "=", " ", 
       RowBox[{"StringTake", "[", 
        RowBox[{
         RowBox[{"body", "[", 
          RowBox[{"[", "strPos", "]"}], "]"}], ",", " ", "1"}], "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"n", "-", 
          RowBox[{"Max", "[", "strPos", "]"}]}], ">", "0"}], ",", "\n", 
        "      ", 
        RowBox[{"token", " ", "=", " ", 
         RowBox[{"Join", "[", 
          RowBox[{"token", ",", " ", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{"EndOfFile", ",", " ", 
             RowBox[{"n", "-", 
              RowBox[{"Max", "[", "strPos", "]"}]}]}], "]"}]}], "]"}]}]}], 
       "\n", "      ", "]"}], ";", "\n", "    ", 
      RowBox[{"token", " ", "=", " ", 
       RowBox[{"Append", "[", 
        RowBox[{"token", ",", " ", "final"}], "]"}]}], ";", "\n", "    ", 
      RowBox[{"MapThread", "[", "\n", "      ", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"stream", ",", " ", "#2", ",", " ", "#3"}], "]"}], "&"}], 
        ",", "\n", "      ", 
        RowBox[{"{", "\n", "        ", 
         RowBox[{
          RowBox[{"Lookup", "[", 
           RowBox[{"handlers", ",", " ", "token", ",", " ", "LexerToken"}], 
           "]"}], ",", "\n", "        ", "body", ",", "\n", "        ", 
          "token"}], "\n", "        ", "}"}]}], "\n", "      ", "]"}]}]}], 
    "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"9ca73fbb-78ce-4339-a28f-e88db1be8ae8"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]new\[RightFloor]", "CodeSubsubsubsubsection",
 Evaluatable->True,ExpressionUUID->"a76fdf49-057d-4961-a7a4-6ea679b9b091"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tokenReadList", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "n_", ",", " ", "t_"}], 
    "]"}], ":=", "\n", "  ", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}], "@", 
    RowBox[{"\"\<Read\>\"", "[", "n", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"bfd58e50-ea0c-4c0f-8896-aa6e87ec66b5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]tokenPeekList\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"7bb04e88-d929-44f2-a63c-a34c88fe9e72"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"tokenPeekList", "[", 
    RowBox[{"stream_", ",", " ", "spec_", ",", " ", "n_", ",", " ", "t_"}], 
    "]"}], ":=", "\n", "  ", 
   RowBox[{
    RowBox[{"TokenStreamer", "[", 
     RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}], "@", 
    RowBox[{"\"\<Peek\>\"", "[", "n", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"2aa5a1fc-8553-4bf4-8b04-28475cfafc73"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenRead\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"d952cae3-c682-4422-b021-50811f05e101"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]prepTokenHandlers\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"c038967d-a5d7-4036-bfc7-69d0dd9abd0f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"prepTokenHandler", "//", "Clear"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"prepTokenHandler", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Stream\>\"", ",", " ", "char_", ",", " ", "escape___"}], 
     "}"}], "]"}], ":=", 
   RowBox[{"readString", "[", 
    RowBox[{"char", ",", " ", "escape"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"prepTokenHandler", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<LookAhead\>\"", ",", " ", "dispatch_"}], "}"}], "]"}], ":=", 
   RowBox[{"readLookAhead", "[", "dispatch", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"prepTokenHandler", "[", "e_", "]"}], ":=", "e"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"b2715515-d52f-4bb9-bada-f02ea2bdc4ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"prepTokenHandlers", "[", "tokens_", "]"}], ":=", "\n", "  ", 
  RowBox[{"ReplacePart", "[", "\n", "    ", 
   RowBox[{"tokens", ",", "\n", "    ", 
    RowBox[{"\"\<Handlers\>\"", "->", "\n", "      ", 
     RowBox[{"Join", "[", "\n", "        ", 
      RowBox[{
       RowBox[{"<|", "\n", "          ", 
        RowBox[{"EndOfFile", "\[Rule]", "LexerToken"}], "\n", "          ", 
        "|>"}], ",", "\n", "        ", 
       RowBox[{"Map", "[", "\n", "          ", 
        RowBox[{"prepTokenHandler", ",", "\n", "          ", 
         RowBox[{"tokens", "[", "\"\<Handlers\>\"", "]"}]}], "\n", 
        "          ", "]"}]}], "\n", "        ", "]"}]}]}], "\n", "    ", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"6519c3be-205f-4cff-aed4-5f272ead71cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenRead\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"1df142c6-5230-46f5-b403-a417727227b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TokenRead", "[", 
    RowBox[{"t_TokenStream", ",", " ", 
     RowBox[{"n", ":", 
      RowBox[{"_Integer", "?", "Positive"}], ":", "1"}]}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"stream", "=", 
        RowBox[{"t", "[", "\"\<Stream\>\"", "]"}]}], ",", " ", 
       RowBox[{"spec", "=", 
        RowBox[{"prepTokenHandlers", "@", 
         RowBox[{"t", "[", "\"\<Tokens\>\"", "]"}]}]}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", ">", "1"}], ",", " ", "\n", "        ", 
       RowBox[{"tokenReadList", "[", 
        RowBox[{"stream", ",", " ", "spec", ",", " ", "n", ",", " ", "t"}], 
        "]"}], ",", "\n", "        ", 
       RowBox[{"tokenRead", "[", 
        RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}]}], "\n", 
      "        ", "]"}]}], "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"1cd51eba-89b4-4b3d-85e3-45cbc1cfe6ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TokenRead\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"2656fc90-fc06-495a-af55-556dbe585f81"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TokenPeek", "[", 
    RowBox[{"t_TokenStream", ",", " ", 
     RowBox[{"n", ":", 
      RowBox[{"_Integer", "?", "Positive"}], ":", "1"}]}], "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"stream", "=", 
        RowBox[{"t", "[", "\"\<Stream\>\"", "]"}]}], ",", " ", 
       RowBox[{"spec", "=", 
        RowBox[{"prepTokenHandlers", "@", 
         RowBox[{"t", "[", "\"\<Tokens\>\"", "]"}]}]}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"n", ">", "1"}], ",", " ", "\n", "      ", 
       RowBox[{"tokenPeekList", "[", 
        RowBox[{"stream", ",", " ", "spec", ",", " ", "n", ",", " ", "t"}], 
        "]"}], ",", "\n", "      ", 
       RowBox[{"tokenPeek", "[", 
        RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], "]"}]}], "\n", 
      "      ", "]"}]}], "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"0dacea45-ee9d-4dda-a0d3-df0a6b3145e7"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"8de36ccf-0138-4e45-959e-\
7e8268a49ce6"]
}, Open  ]],

Cell["", "SectionSeparator",ExpressionUUID->"ff870605-b482-4757-a002-\
c984abce979a"]
},
NotebookEventActions->{{"MenuCommand", "Save"} :> 
  EasyIDE`Notebooks`Manipulation`IDESave[
    EvaluationNotebook[]], PassEventsDown -> True, EvaluationOrder -> After},
WindowSize->{808, 755},
WindowMargins->{{43, Automatic}, {Automatic, 0}},
WindowTitle->"EasyIDE: LexParse",
TaggingRules->{
 "IndentCharacter" -> "  ", 
  "EasyIDE" -> {
   "Tabs" -> {
     "PacletInfo" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/PacletInfo.m"}, 
      "Tokens" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/Lexer/Tokens.nb"}, 
      "Parser" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/Parser/Parser.nb"}, 
      "AST" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/AST/AST.nb"}, 
      "ASTObject" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/ASTObject.nb"}, 
      "ParserObject" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/ParserObject.nb"}, 
      "EBNFGrammar" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/EBNFGrammar.nb"}, 
      "EBNF" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/EBNF/EBNF.nb"}}, 
    "FileViewer" -> {"Visible" -> False}, "Toolbars" -> {"Column" -> GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 ButtonBox[
                 "\"Load Package\"", ButtonFunction :> 
                  EasyIDE`Plugins`CodePackageToolbar`loadPackage[], 
                  Appearance -> Inherited, Evaluator -> Automatic, Method -> 
                  "Preemptive"], "ToolbarElement"], 
                StyleBox[
                 ButtonBox[
                 "\"Open Package\"", ButtonFunction :> 
                  EasyIDE`Plugins`CodePackageToolbar`openPackage[], 
                  Appearance -> Inherited, Evaluator -> Automatic, Method -> 
                  "Preemptive"], "ToolbarElement"], 
                StyleBox[
                 ActionMenuBox[
                  ButtonBox[
                  "\"Insert\"", ButtonFunction :> {}, Evaluator -> None, 
                   BaseStyle -> "PluginMenu", Appearance -> Inherited, 
                   FrameMargins -> {{10, 10}, {0, 0}}, 
                   ImageSize -> {Automatic, 28}, Method -> "Preemptive"], {
                  "\"Package\"" :> FrontEndExecute[
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], {
                    Cell["Package Name", "CodeSection"], 
                    Cell[
                    "\[LeftCeiling]\n  Package description\n\[RightFloor]", 
                    "Text", Evaluatable -> True], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
                    "InputSection"], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"End", "[", "]"}], ";"}]], "InputSection"], 
                    Cell["", "SectionSeparator"]}]]}, Appearance -> None, 
                  MenuAppearance -> "Dropdown"], "ToolbarElement"]}}, 
              BaseStyle -> "ToolbarElementRow"], 
             ButtonBox[
             "", BaseStyle -> "ToolbarCloseButton", ButtonData -> 
              "CodePackage"]}}, BaseStyle -> "ToolbarCell"]}}, BaseStyle -> 
        "Toolbars"], "Tags" -> {"CodePackage"}, 
      "Cells" -> {"CodePackage" -> GridBox[{{
            GridBox[{{
               StyleBox[
                ButtonBox[
                "\"Load Package\"", ButtonFunction :> 
                 EasyIDE`Plugins`CodePackageToolbar`loadPackage[], Appearance -> 
                 Inherited, Evaluator -> Automatic, Method -> "Preemptive"], 
                "ToolbarElement"], 
               StyleBox[
                ButtonBox[
                "\"Open Package\"", ButtonFunction :> 
                 EasyIDE`Plugins`CodePackageToolbar`openPackage[], Appearance -> 
                 Inherited, Evaluator -> Automatic, Method -> "Preemptive"], 
                "ToolbarElement"], 
               StyleBox[
                ActionMenuBox[
                 ButtonBox[
                 "\"Insert\"", ButtonFunction :> {}, Evaluator -> None, 
                  BaseStyle -> "PluginMenu", Appearance -> Inherited, 
                  FrameMargins -> {{10, 10}, {0, 0}}, 
                  ImageSize -> {Automatic, 28}, Method -> "Preemptive"], {
                 "\"Package\"" :> FrontEndExecute[
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], {
                    Cell["Package Name", "CodeSection"], 
                    Cell[
                    "\[LeftCeiling]\n  Package description\n\[RightFloor]", 
                    "Text", Evaluatable -> True], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
                    "InputSection"], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"End", "[", "]"}], ";"}]], "InputSection"], 
                    Cell["", "SectionSeparator"]}]]}, Appearance -> None, 
                 MenuAppearance -> "Dropdown"], "ToolbarElement"]}}, 
             BaseStyle -> "ToolbarElementRow"], 
            ButtonBox[
            "", BaseStyle -> "ToolbarCloseButton", ButtonData -> 
             "CodePackage"]}}, BaseStyle -> "ToolbarCell"]}}, 
    "Project" -> {
     "Directory" -> 
      "/Users/Mark/Documents/Wolfram Mathematica/Applications/LexParse/"}, 
    "MainStyleName" -> "DarkGUI", "ActiveTab" -> "Tokens", "StyleSheet" -> 
    FrontEnd`FileName[{"EasyIDE", "Extensions", "DarkGUI"}, "CodePackage.nb"],
     "FileToolbar" -> "CodePackage", 
    "Options" -> {
     FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
      StyleDefinitions -> 
      FrontEnd`FileName[{"BTools"}, "CodePackage.nb", CharacterEncoding -> 
        "UTF-8"]}, "AutoGeneratePackage" -> True, "SavingAction" -> None}},
DynamicUpdating->Automatic,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"EasyIDE", "Extensions", "DarkGUI"}, 
       "CodePackage.nb"]]]}, Visible -> False, 
  TaggingRules -> {"EasyIDE" -> {"FileViewer" -> {"Visible" -> False}}}, 
  FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]

