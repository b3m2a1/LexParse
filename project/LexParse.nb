Notebook[{

Cell[CellGroupData[{
Cell["ENBF Implementation", \
"CodeSection",ExpressionUUID->"57142974-4dde-4646-9d4f-e830855bdbec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"EBNFRule", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EBNFSequence", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EBNFAlternatives", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EBNFOptional", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EBNFRepeated", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"EBNFAny", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"c8ff2400-5d7c-44c5-852e-1d5ac93bfbdd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammar", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"fb3faeac-52b9-4913-afd1-887ea416d6c0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarRule", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarSymbol", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarValue", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"175525b9-11dc-41cc-bdc7-d5b2cf6a5119"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFLexer", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CollectEBNFTokens", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"be44bf5c-ec9b-4337-afb4-2640e9757f34"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFParser", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CollectEBNFTokenPatterns", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"8bdd88e9-f6c2-4d13-a5e4-24e192decd1a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"83484623-b9c0-4594-8e86-\
126d70afd5a0"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFGrammar\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"d08af861-ccaa-465a-823d-af6f14f2e8c7"],

Cell["\<\
\[LeftCeiling]
\tI\[CloseCurlyQuote]m implementing this directly from \
https://www.ics.uci.edu/~pattis/misc/ebnf2.pdf
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"2891e84e-6ca4-4062-a718-e4c15e34fae6"],

Cell["\<\
\[LeftCeiling]We\[CloseCurlyQuote]re gonna have a few special heads here \
(just because explicit types are useful). These will map very directly onto \
Mathematica structures (obviously, because Mathematica is implemented using \
EBNF-type rules).\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"17f06260-a4dc-45b7-935c-84eb2166a751"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"EBNFRule", "[", 
   RowBox[{"name_", ",", " ", "structure_"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EBNFSequence", "[", "seq__", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EBNFAlternatives", "[", "alts__", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EBNFOptional", "[", 
   RowBox[{"structure_", ",", " ", "val_"}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EBNFRepeated", "[", "structure_", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EBNFAny", "[", "]"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"20e35e0b-757b-455a-8d9f-75b42399038a"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFGrammarValue\[RightFloor]", \
"CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"c14f2235-74dd-48e1-98cd-6198fe7edc8f"],

Cell[BoxData[
 RowBox[{"BuildEBNFGrammarValue", "//", 
  "Clear"}]], \
"CodeInput",ExpressionUUID->"5a9e3361-597e-4546-afd7-ff0827f1e1d5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalizeSlots", "[", "a_", "]"}], ":=", "\n", "  ", 
  RowBox[{"a", "/.", 
   RowBox[{
    RowBox[{
     RowBox[{"Verbatim", "[", "Blank", "]"}], "[", "s_Symbol", "]"}], 
    "\[RuleDelayed]", 
    RowBox[{"Blank", "[", 
     RowBox[{"SymbolName", "[", "s", "]"}], 
     "]"}]}]}]}]], \
"CodeInput",ExpressionUUID->"f6acf2a5-bc23-46f9-b5e1-ad64742f853e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarValue", "[", 
    RowBox[{
     RowBox[{"Verbatim", "[", "Alternatives", "]"}], "[", "a__", "]"}], "]"}],
    ":=", "\n", "  ", 
   RowBox[{
    RowBox[{"BuildEBNFGrammarValue", "/@", 
     RowBox[{"EBNFAlternatives", "[", "a", "]"}]}], "//", 
    "normalizeSlots"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"0462a2ac-53f1-47c2-9db7-2d7a2e801d2a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarValue", "[", 
    RowBox[{
     RowBox[{"Verbatim", "[", "Sequence", "]"}], "[", "a__", "]"}], "]"}], ":=",
    "\n", "  ", 
   RowBox[{
    RowBox[{"BuildEBNFGrammarValue", "/@", 
     RowBox[{"EBNFSequence", "[", "a", "]"}]}], "//", "normalizeSlots"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarValue", "[", 
    RowBox[{
     RowBox[{"Verbatim", "[", "PatternSequence", "]"}], "[", "a__", "]"}], 
    "]"}], ":=", "\n", "  ", 
   RowBox[{"BuildEBNFGrammarValue", "[", 
    RowBox[{"Sequence", "[", "a", "]"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"3e06e91e-13ad-4e85-b0c0-204ec1e1c2f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarValue", "[", 
    RowBox[{
     RowBox[{"Verbatim", "[", "Repeated", "]"}], "[", "a_", "]"}], "]"}], ":=",
    "\n", "  ", 
   RowBox[{
    RowBox[{"BuildEBNFGrammarValue", "/@", 
     RowBox[{"EBNFRepeated", "[", "a", "]"}]}], "//", "normalizeSlots"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"3c1bc1c1-4c94-489b-89e2-6b5d3425c814"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarValue", "[", 
    RowBox[{
     RowBox[{"Verbatim", "[", "Optional", "]"}], "[", 
     RowBox[{"a_", ",", " ", "b_"}], "]"}], "]"}], ":=", "\n", "  ", 
   RowBox[{
    RowBox[{"BuildEBNFGrammarValue", "/@", 
     RowBox[{"EBNFOptional", "[", 
      RowBox[{"a", ",", " ", "b"}], "]"}]}], "//", "normalizeSlots"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"a4e3d3df-8020-4254-a47c-f4197081db35"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarValue", "[", 
    RowBox[{
     RowBox[{"Verbatim", "[", "_", "]"}], "|", 
     RowBox[{"Verbatim", "[", "__", "]"}], "|", 
     RowBox[{"Verbatim", "[", "___", "]"}]}], "]"}], ":=", "\n", "  ", 
   RowBox[{"EBNFAny", "[", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"6b0bc43b-c1b7-4862-af6a-0645c1a70027"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"BuildEBNFGrammarValue", "[", 
   RowBox[{"HoldPattern", "[", "v_", "]"}], "]"}], ":=", 
  RowBox[{"BuildEBNFGrammarValue", "[", "v", "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarValue", "[", "e_", "]"}], ":=", "e"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"42553055-84c3-44b2-bc60-11cd31b29e61"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BuildEBNFGrammarValue", "~", "SetAttributes", "~", 
   RowBox[{"{", 
    RowBox[{"HoldAll", ",", " ", "SequenceHold"}], "}"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"a8804a32-7677-40bc-b241-e5420e7fae0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFGrammarSymbol\[RightFloor]", \
"CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"2304cb77-7ffb-4461-9af4-562813341016"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarSymbol", "[", 
    RowBox[{"s", ":", "_Symbol"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"{", 
    RowBox[{"_SymbolName", "[", "s", "]"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarSymbol", "[", 
    RowBox[{"s", ":", "_String"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"{", "_s", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarSymbol", "[", 
    RowBox[{"{", 
     RowBox[{"e_", ",", " ", "ops___"}], "}"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"BuildEBNFGrammarSymbol", "[", "e", "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", " ", "ops"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarSymbol", "[", "e_", "]"}], ":=", "\n", "\t", 
   RowBox[{"{", "e", "}"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"a028f8f6-ced8-4639-98e6-fdb16617e10d"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFGrammarRule\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"a4d52f5c-7626-40e8-8920-110698281886"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarRule", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"Rule", "|", "RuleDelayed"}], ")"}], "[", 
     RowBox[{"r_", ",", " ", "v_"}], "]"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sym", "=", 
       RowBox[{"BuildEBNFGrammarSymbol", "[", "r", "]"}]}], "}"}], ",", "\n", 
     "    ", 
     RowBox[{"EBNFRule", "[", 
      RowBox[{
       RowBox[{"sym", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
       RowBox[{"BuildEBNFGrammarValue", "[", "v", "]"}], ",", " ", 
       RowBox[{"Rest", "[", "sym", "]"}]}], "]"}]}], "\n", "    ", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammarRule", "[", "e_EBNFRule", "]"}], ":=", "\n", "  ",
    "e"}], ";"}], "\n", 
 RowBox[{"BuildEBNFGrammarRule", "~", "SetAttributes", "~", 
  RowBox[{"{", 
   RowBox[{"HoldAll", ",", " ", "SequenceHold"}], 
   "}"}]}]}], \
"CodeInput",ExpressionUUID->"91dbb363-f664-4412-a36c-563ab2f781e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFGrammar\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"e5b19bc7-5797-49ae-a7e3-68c57f21e464"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammar", "[", 
    RowBox[{"rules", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"_RuleDelayed", "|", "_Rule", "|", "_EBNFRule"}], ")"}], 
       ".."}], "}"}]}], "]"}], ":=", "\n", "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "grammarStructs", "}"}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"grammarStructs", " ", "=", " ", 
       RowBox[{"BuildEBNFGrammarRule", "/@", "rules"}]}], ";", "\n", "    ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "allows", " ", "us", " ", "to", " ", "reuse", " ", "struct", " ", 
        "names"}], " ", "*)"}], "\n", "    ", 
      RowBox[{"<|", "\n", "      ", 
       RowBox[{"\"\<Rules\>\"", "->", "\n", "        ", 
        RowBox[{"Thread", "[", "\n", "          ", 
         RowBox[{"EBNFRule", "[", "\n", "            ", 
          RowBox[{
           RowBox[{"grammarStructs", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", "\n", 
           "            ", 
           RowBox[{
            RowBox[{"grammarStructs", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], " ", "//.", " ", 
            "\n", "              ", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Verbatim", "[", 
                 RowBox[{"Replace", "[", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"l_", ",", " ", "___"}], "}"}], "\[RuleDelayed]", 
                    "l"}]}], "]"}], "]"}], "\[Rule]", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", " ", 
              "grammarStructs"}], "]"}]}], ",", "\n", "            ", 
           RowBox[{"grammarStructs", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "3"}], "]"}], "]"}]}], "\n", 
          "            ", "]"}], "\n", "          ", "]"}]}], "\n", "      ", 
       "|>"}]}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFGrammar", "[", "a_Association", "]"}], ":=", "\n", "  ", 
   
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"KeyExistsQ", "[", 
      RowBox[{"a", ",", " ", "\"\<Rules\>\""}], "]"}], ",", " ", "a", ",", 
     " ", 
     RowBox[{"BuildEBNFGrammar", "[", 
      RowBox[{"Normal", "@", "a"}], "]"}]}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"4da54c9b-aaa1-408c-801c-818fd5f9a6dd"]\

}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFLexer\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"07cfc4b8-7208-43af-9afb-7a26daf65509"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]CollectEBNFTokens\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"1c854d9f-d143-4667-a6d2-9606310ff152"],

Cell["\<\
\[LeftCeiling]
\tDetermines the necessary set of tokens to feed to the tokenizer to build \
the grammar
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"c1398239-91ae-4ece-b5df-5304c2fea9ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$convertEBNFTokenRules", "=", "\n", "  ", 
   RowBox[{"Dispatch", "@", "\n", "    ", 
    RowBox[{"{", "\n", "      ", 
     RowBox[{
      RowBox[{
       RowBox[{"EBNFAlternatives", "[", "a___", "]"}], ":>", "\n", "        ", 
       RowBox[{"CollectEBNFTokens", "@", 
        RowBox[{"{", "a", "}"}]}]}], ",", "\n", "      ", 
      RowBox[{
       RowBox[{"EBNFSequence", "[", "e___", "]"}], ":>", "\n", "        ", 
       RowBox[{"CollectEBNFTokens", "@", 
        RowBox[{"{", "e", "}"}]}]}], ",", "\n", "      ", 
      RowBox[{
       RowBox[{"EBNFOptional", "[", "arg_", "]"}], ":>", "\n", "       ", 
       RowBox[{"stickyOptional", "[", 
        RowBox[{"Value", "@", 
         RowBox[{"CollectEBNFTokens", "[", 
          RowBox[{"{", "arg", "}"}], "]"}]}], "]"}]}], ",", "\n", "      ", 
      RowBox[{
       RowBox[{"EBNFRepeated", "[", "arg_", "]"}], ":>", "\n", "        ", 
       RowBox[{"repeatTokens", "[", 
        RowBox[{
         RowBox[{"CollectEBNFTokens", "[", 
          RowBox[{"{", "arg", "}"}], "]"}], ",", " ", "10"}], "]"}]}], ",", 
      "\n", "      ", 
      RowBox[{
       RowBox[{"EBNFRule", "[", "\n", "        ", 
        RowBox[{
        "name_", ",", "\n", "        ", "struct_", ",", "\n", "        ", 
         "ops___"}], "\n", "        ", "]"}], "\[RuleDelayed]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"name", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", "ops"}], "}"}], "->", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"CollectEBNFTokens", "@", 
            RowBox[{"{", "struct", "}"}]}], ",", " ", "1"}], "]"}]}], ")"}]}],
       ",", "\n", "      ", 
      RowBox[{"s_String", "\[RuleDelayed]", "s"}], ",", "\n", "      ", 
      RowBox[{"_", "\[Rule]", "Nothing"}]}], "\n", "      ", "}"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"52f48e72-3ff3-4d13-8a25-eda7f7ad11e0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"CollectEBNFTokens", "[", "e_EBNFGrammar", "]"}], ":=", "\n", "  ", 
   RowBox[{"CollectEBNFTokens", "[", 
    RowBox[{"e", "[", "\"\<Rules\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CollectEBNFTokens", "[", "rules_List", "]"}], ":=", "\n", "  ", 
   RowBox[{"Replace", "[", 
    RowBox[{"rules", ",", " ", "$convertEBNFTokenRules", ",", " ", "1"}], 
    "]"}]}], ";"}]}], \
"CodeInput",ExpressionUUID->"58d10876-4b5e-4acf-8a47-7d7b53a1ea5d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]repeatTokens\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"80fcb205-cca2-464d-9dfb-733dc6cb1d48"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"repeatTokens", "[", 
    RowBox[{"tok_", ",", " ", "n_"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringRepeat", "[", 
       RowBox[{"tok", ",", " ", "#"}], "]"}], "&"}], ",", " ", 
     RowBox[{"Range", "[", "n", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"repeatTokens", "~", "SetAttributes", "~", "Listable"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"ed050ade-8562-4338-bdb0-1e776c49876b"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]stickyOptional\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"65c4260c-5e10-4af8-b4b7-c58c01ec8717"],

Cell["A way to make Optional glom onto the tokens to its right", \
"Text",ExpressionUUID->"e68ad90e-d7fe-4b20-8949-e4a4e1e5028e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"stickyOptional", "/:", "\n", "  ", 
   RowBox[{"{", 
    RowBox[{"a___", ",", " ", 
     RowBox[{"stickyOptional", "[", "tags_", "]"}], ",", " ", 
     RowBox[{"b", ":", 
      RowBox[{"_String", "|", "_List"}]}], ",", " ", "c___"}], "}"}], ":=", 
   "\n", "    ", 
   RowBox[{"{", 
    RowBox[{"a", ",", " ", 
     RowBox[{"glomOptional", "[", 
      RowBox[{"tags", ",", " ", "b"}], "]"}], ",", " ", "c"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"glomOptional", "[", 
    RowBox[{"tag_", ",", " ", "tok_"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"tag", "<>", "tok"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glomOptional", "~", "SetAttributes", "~", "Listable"}], 
  ";"}]}], \
"CodeInput",ExpressionUUID->"1bc404d1-0327-4fc2-affd-28d71b21e403"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFLexer\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"a82ede28-e534-4b7e-ac0e-e712d513aac5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"BuildEBNFLexer", "[", "e_EBNFGrammar", "]"}], ":=", "\n", "  ", 
   RowBox[{"LexerObject", "[", 
    RowBox[{"DeleteDuplicates", "@", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Values", "@", 
       RowBox[{"CollectEBNFTokens", "[", "e", "]"}]}]}]}], "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"8f791dcd-5df1-4ec7-bb76-3d0d6b0cbf62"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFParser\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"7ade2a8d-8825-4601-a414-d963579a959a"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]CollectEBNFTokenPatterns\[RightFloor]", \
"CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"d7a2a9b8-2a85-404c-86c6-527609e379c4"],

Cell["\<\
\[LeftCeiling]
\tNeed a good way to go from simple rules to the full spec
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"7a51c45d-1c06-4c71-bd3a-e4ded87ea88b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$convertEBNFPatternRules", "=", "\n", "  ", 
   RowBox[{"Dispatch", "@", "\n", "    ", 
    RowBox[{"{", "\n", "      ", 
     RowBox[{
      RowBox[{
       RowBox[{"EBNFSequence", "[", 
        RowBox[{"start_", ",", " ", 
         RowBox[{"EBNFAny", "[", "]"}], ",", " ", "end_"}], "]"}], 
       "\[RuleDelayed]", "\n", "        ", 
       RowBox[{"{", 
        RowBox[{"\"\<Delimited\>\"", ",", " ", 
         RowBox[{"{", 
          RowBox[{"start", ",", " ", "end"}], "}"}]}], "}"}]}], ",", "\n", 
      "      ", 
      RowBox[{
       RowBox[{"EBNFSequence", "[", 
        RowBox[{
         RowBox[{"EBNFAny", "[", "]"}], ",", " ", "op_", ",", " ", 
         RowBox[{"EBNFAny", "[", "]"}]}], "]"}], ":>", "\n", "        ", 
       "\"\<Operator\>\""}], ",", "\n", "      ", 
      RowBox[{
       RowBox[{"EBNFSequence", "[", 
        RowBox[{
         RowBox[{"EBNFAny", "[", "]"}], ",", " ", "op_"}], "]"}], ":>", "\n", 
       "        ", "\"\<Default\>\""}], ",", "\n", "      ", 
      RowBox[{
       RowBox[{"EBNFSequence", "[", 
        RowBox[{"struct", ":", 
         RowBox[{
          RowBox[{"Except", "[", 
           RowBox[{"EBNFAny", "[", "]"}], "]"}], ".."}]}], "]"}], 
       "\[RuleDelayed]", "\n", "        ", 
       RowBox[{"{", 
        RowBox[{"\"\<Structured\>\"", ",", " ", 
         RowBox[{"Replace", "[", 
          RowBox[{
           RowBox[{"CollectEBNFTokens", "[", 
            RowBox[{"{", "struct", "}"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"a_", ",", " ", "___"}], "}"}], "\[RuleDelayed]", "a"}], 
           ",", " ", "1"}], "]"}]}], "}"}]}], ",", "\n", "      ", 
      RowBox[{
       RowBox[{"EBNFRule", "[", "\n", "        ", 
        RowBox[{
        "name_", ",", "\n", "        ", "struct_", ",", "\n", "        ", 
         "ops___"}], "\n", "        ", "]"}], "\[RuleDelayed]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"name", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", "ops"}], "}"}], "->", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"collectTokenBlockTypes", "@", 
            RowBox[{"{", "struct", "}"}]}], ",", " ", "1"}], "]"}]}], ")"}]}],
       ",", "\n", "      ", 
      RowBox[{"s_String", "\[RuleDelayed]", "s"}], ",", "\n", "      ", 
      RowBox[{"_", "\[Rule]", "Nothing"}]}], "\n", "      ", "}"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"e03a2c2a-9473-4785-a2af-7e746f3a3fa5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"collectTokenBlockTypes", "[", "rules_", "]"}], ":=", "\n", "  ", 
  RowBox[{"Replace", "[", 
   RowBox[{"rules", ",", " ", "$convertEBNFPatternRules", ",", " ", "1"}], 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"319a8b28-4100-4729-9bd2-754ea93d8ee0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"CollectEBNFTokenPatterns", "[", "e_EBNFGrammar", "]"}], ":=", 
   "\n", "  ", 
   RowBox[{"CollectEBNFTokenPatterns", "[", 
    RowBox[{"e", "[", "\"\<Rules\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CollectEBNFTokenPatterns", "[", "rules_List", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"With", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
       RowBox[{"tokens", "=", 
        RowBox[{"Association", "@", 
         RowBox[{"CollectEBNFTokens", "[", "rules", "]"}]}]}], ",", "\n", 
       "      ", 
       RowBox[{"blocks", "=", 
        RowBox[{"Association", "@", 
         RowBox[{"collectTokenBlockTypes", "[", "rules", "]"}]}]}]}], "\n", 
      "      ", "}"}], ",", "\n", "   ", 
     RowBox[{"Throw", "@", 
      RowBox[{"Flatten", "@", 
       RowBox[{"MapIndexed", "[", "\n", "      ", 
        RowBox[{
         RowBox[{
          RowBox[{"Table", "[", "\n", "  ", "      ", 
           RowBox[{
            RowBox[{"<|", "\n", "  ", "        ", 
             RowBox[{
              RowBox[{"\"\<Token\>\"", "\[Rule]", "t"}], ",", "\n", "  ", 
              "  ", "      ", 
              RowBox[{"\"\<BlockType\>\"", "\[Rule]", 
               RowBox[{"blocks", "[", 
                RowBox[{"#2", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ",", "\n", "  ", 
              "  ", "      ", 
              RowBox[{"\"\<BlockName\>\"", "\[Rule]", 
               RowBox[{"#2", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ",", " ", "1"}], "]"}], "]"}]}], ",", "\n", 
              "  ", "        ", 
              RowBox[{"Sequence", "@@", 
               RowBox[{"#2", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ",", " ", "2"}], "]"}], "]"}]}]}], "\n", "  ", 
             "        ", "|>"}], ",", "\n", "  ", "      ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "#"}], "}"}]}], "\n", "  ", "      ", 
           "]"}], "&"}], ",", "\n", "      ", "tokens"}], "\n", "      ", 
        "]"}]}]}]}], "\n", "    ", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"6ba53854-1f3f-4397-ac8d-53fec6052ad7"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]BuildEBNFParser\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"7f5aa66b-dc2b-47df-b77b-38d9661f722d"],

Cell["\<\
\[LeftCeiling]
\tBuilds a ParserObject that can handle the specified EBNF grammar
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"c162f3c8-6a02-4922-a38a-2740fdcf84c7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"BuildEBNFParser", "[", "e_EBNFGrammar", "]"}], ":=", "\n", "  ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"lexer", "=", 
       RowBox[{"BuildEBNFLexer", "[", "e", "]"}]}], ",", " ", "p"}], "}"}], 
    ",", "\n", "    ", 
    RowBox[{
     RowBox[{"p", " ", "=", " ", 
      RowBox[{"ParserObject", "[", "\n", "      ", 
       RowBox[{"lexer", ",", "\n", "      ", 
        RowBox[{"CollectEBNFTokenPatterns", "[", "e", "]"}]}], "\n", "      ",
        "]"}]}], ";", "\n", "    ", 
     RowBox[{"InterfaceModify", "[", 
      RowBox[{"ParserObject", ",", "\n", "      ", "p", ",", "\n", "      ", 
       RowBox[{
        RowBox[{"Append", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"\"\<Grammar\>\"", "\[Rule]", "e"}]}], "]"}], "&"}]}], "\n",
       "      ", "]"}]}]}], "\n", "    ", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"e462f5b0-b196-4610-92e1-cc76913253f9"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"59f5434a-6dca-4253-a8ee-\
80b95b4c2ca9"]
}, Open  ]],

Cell["", "SectionSeparator",ExpressionUUID->"86446ca9-8a64-452d-95e6-\
1f70be9461f7"]
},
NotebookEventActions->{{"MenuCommand", "Save"} :> 
  EasyIDE`Notebooks`Manipulation`IDESave[
    EvaluationNotebook[]], PassEventsDown -> True, EvaluationOrder -> After},
WindowSize->{808, 755},
WindowMargins->{{43, Automatic}, {Automatic, 0}},
WindowTitle->"EasyIDE: LexParse",
TaggingRules->{
 "IndentCharacter" -> "  ", 
  "EasyIDE" -> {
   "Tabs" -> {
     "PacletInfo" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/PacletInfo.m"}, 
      "Tokens" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/Lexer/Tokens.nb"}, 
      "Parser" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/Parser/Parser.nb"}, 
      "AST" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/AST/AST.nb"}, 
      "ASTObject" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/ASTObject.nb"}, 
      "ParserObject" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/ParserObject.nb"}, 
      "EBNF" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/LexParse/Packages/EBNF/EBNF.nb"}}, 
    "FileViewer" -> {"Visible" -> False}, "Toolbars" -> {"Column" -> GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 ButtonBox[
                 "\"Load Package\"", ButtonFunction :> 
                  EasyIDE`Plugins`CodePackageToolbar`loadPackage[], 
                  Appearance -> Inherited, Evaluator -> Automatic, Method -> 
                  "Preemptive"], "ToolbarElement"], 
                StyleBox[
                 ButtonBox[
                 "\"Open Package\"", ButtonFunction :> 
                  EasyIDE`Plugins`CodePackageToolbar`openPackage[], 
                  Appearance -> Inherited, Evaluator -> Automatic, Method -> 
                  "Preemptive"], "ToolbarElement"], 
                StyleBox[
                 ActionMenuBox[
                  ButtonBox[
                  "\"Insert\"", ButtonFunction :> {}, Evaluator -> None, 
                   BaseStyle -> "PluginMenu", Appearance -> Inherited, 
                   FrameMargins -> {{10, 10}, {0, 0}}, 
                   ImageSize -> {Automatic, 28}, Method -> "Preemptive"], {
                  "\"Package\"" :> FrontEndExecute[
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], {
                    Cell["Package Name", "CodeSection"], 
                    Cell[
                    "\[LeftCeiling]\n  Package description\n\[RightFloor]", 
                    "Text", Evaluatable -> True], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
                    "InputSection"], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"End", "[", "]"}], ";"}]], "InputSection"], 
                    Cell["", "SectionSeparator"]}]]}, Appearance -> None, 
                  MenuAppearance -> "Dropdown"], "ToolbarElement"]}}, 
              BaseStyle -> "ToolbarElementRow"], 
             ButtonBox[
             "", BaseStyle -> "ToolbarCloseButton", ButtonData -> 
              "CodePackage"]}}, BaseStyle -> "ToolbarCell"]}}, BaseStyle -> 
        "Toolbars"], "Tags" -> {"CodePackage"}, 
      "Cells" -> {"CodePackage" -> GridBox[{{
            GridBox[{{
               StyleBox[
                ButtonBox[
                "\"Load Package\"", ButtonFunction :> 
                 EasyIDE`Plugins`CodePackageToolbar`loadPackage[], Appearance -> 
                 Inherited, Evaluator -> Automatic, Method -> "Preemptive"], 
                "ToolbarElement"], 
               StyleBox[
                ButtonBox[
                "\"Open Package\"", ButtonFunction :> 
                 EasyIDE`Plugins`CodePackageToolbar`openPackage[], Appearance -> 
                 Inherited, Evaluator -> Automatic, Method -> "Preemptive"], 
                "ToolbarElement"], 
               StyleBox[
                ActionMenuBox[
                 ButtonBox[
                 "\"Insert\"", ButtonFunction :> {}, Evaluator -> None, 
                  BaseStyle -> "PluginMenu", Appearance -> Inherited, 
                  FrameMargins -> {{10, 10}, {0, 0}}, 
                  ImageSize -> {Automatic, 28}, Method -> "Preemptive"], {
                 "\"Package\"" :> FrontEndExecute[
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], {
                    Cell["Package Name", "CodeSection"], 
                    Cell[
                    "\[LeftCeiling]\n  Package description\n\[RightFloor]", 
                    "Text", Evaluatable -> True], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
                    "InputSection"], 
                    Cell[
                    BoxData[
                    RowBox[{
                    RowBox[{"End", "[", "]"}], ";"}]], "InputSection"], 
                    Cell["", "SectionSeparator"]}]]}, Appearance -> None, 
                 MenuAppearance -> "Dropdown"], "ToolbarElement"]}}, 
             BaseStyle -> "ToolbarElementRow"], 
            ButtonBox[
            "", BaseStyle -> "ToolbarCloseButton", ButtonData -> 
             "CodePackage"]}}, BaseStyle -> "ToolbarCell"]}}, 
    "Project" -> {
     "Directory" -> 
      "/Users/Mark/Documents/Wolfram Mathematica/Applications/LexParse/"}, 
    "MainStyleName" -> "DarkGUI", "ActiveTab" -> "EBNF", "StyleSheet" -> 
    FrontEnd`FileName[{"EasyIDE", "Extensions", "DarkGUI"}, "CodePackage.nb"],
     "FileToolbar" -> "CodePackage", 
    "Options" -> {
     FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
      StyleDefinitions -> 
      FrontEnd`FileName[{"BTools"}, "CodePackage.nb", CharacterEncoding -> 
        "UTF-8"]}, "AutoGeneratePackage" -> True, "SavingAction" -> None}},
DynamicUpdating->Automatic,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"EasyIDE", "Extensions", "DarkGUI"}, 
       "CodePackage.nb"]]]}, Visible -> False, 
  TaggingRules -> {"EasyIDE" -> {"FileViewer" -> {"Visible" -> False}}}, 
  FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]

