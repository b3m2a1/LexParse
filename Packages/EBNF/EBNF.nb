Notebook[{Cell[CellGroupData[{Cell["ENBF Implementation", "CodeSection"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"EBNFRule", "::", "usage"}], "=", 
            "\"\""}], ";"}], "\n", RowBox[
         {RowBox[{RowBox[{"EBNFSequence", "::", "usage"}], "=", "\"\""}], 
          ";"}], "\n", RowBox[{RowBox[{RowBox[{"EBNFAlternatives", "::", 
              "usage"}], "=", "\"\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"EBNFOptional", "::", "usage"}], "=", 
            "\"\""}], ";"}], "\n", RowBox[
         {RowBox[{RowBox[{"EBNFRepeated", "::", "usage"}], "=", "\"\""}], 
          ";"}]}], "CodeInput"], 
     Cell[BoxData[RowBox[{RowBox[{RowBox[{"BuildEBNFGrammar", "::", 
             "usage"}], "=", "\"\""}], ";"}]], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"BuildEBNFGrammarRule", "::", 
              "usage"}], "=", "\"\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"BuildEBNFGrammarSymbol", "::", "usage"}], 
            "=", "\"\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"BuildEBNFGrammarValue", "::", "usage"}], 
            "=", "\"\""}], ";"}]}], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"BuildEBNFLexer", "::", "usage"}], 
            "=", "\"\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"CollectEBNFTokens", "::", "usage"}], "=", 
            "\"\""}], ";"}]}], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"BuildEBNFParser", "::", 
              "usage"}], "=", "\"\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"CollectEBNFTokenPatterns", "::", "usage"}], 
            "=", "\"\""}], ";"}]}], "CodeInput"], 
     Cell[CellGroupData[
       {Cell[BoxData[RowBox[{RowBox[{"Begin", "[", "\"`Private`\"", "]"}], 
            ";"}]], "InputSection"], Cell[CellGroupData[
          {Cell["\[LeftCeiling]BuildEBNFGrammar\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tI\[CloseCurlyQuote]m implementing this directly from \
https://www.ics.uci.edu/~pattis/misc/ebnf2.pdf\n\[RightFloor]", "Text", 
            Evaluatable -> True], Cell["\[LeftCeiling]We\[CloseCurlyQuote]re \
gonna have a few special heads here (just because explicit types are useful). \
These will map very directly onto Mathematica structures (obviously, because \
Mathematica is implemented using EBNF-type rules).\[RightFloor]", "Text", 
            Evaluatable -> True], Cell[BoxData[{RowBox[{RowBox[{"EBNFRule", 
                  "[", RowBox[{"name_", ",", " ", "structure_"}], "]"}], 
                ";"}], "\n", RowBox[{RowBox[{"EBNFSequence", "[", "seq__", 
                  "]"}], ";"}], "\n", RowBox[{RowBox[{"EBNFAlternatives", 
                  "[", "alts__", "]"}], ";"}], "\n", RowBox[{RowBox[
                 {"EBNFOptional", "[", RowBox[{"structure_", ",", " ", 
                    "val_"}], "]"}], ";"}], "\n", RowBox[{RowBox[
                 {"EBNFRepeated", "[", "structure_", "]"}], ";"}]}], 
            "CodeInput"], Cell[CellGroupData[
             {Cell["\[LeftCeiling]BuildEBNFGrammarValue\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"normalizeSlots", "[", "a_", "]"}], ":=", 
                  "\n", "  ", RowBox[{"a", "/.", RowBox[{RowBox[
                       {RowBox[{"Verbatim", "[", "Blank", "]"}], "[", 
                        "s_Symbol", "]"}], "\[RuleDelayed]", RowBox[{"Blank", 
                        "[", RowBox[{"SymbolName", "[", "s", "]"}], 
                        "]"}]}]}]}]], "CodeInput"], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"BuildEBNFGrammarValue", "[", 
                       RowBox[{RowBox[{"Verbatim", "[", "Alternatives", 
                          "]"}], "[", "a__", "]"}], "]"}], ":=", "\n", "  ", 
                     RowBox[{"normalizeSlots", "@", RowBox[
                        {"EBNFAlternatives", "[", "a", "]"}]}]}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"BuildEBNFGrammarValue", "[", 
                       RowBox[{RowBox[{"Verbatim", "[", "Sequence", "]"}], 
                         "[", "a__", "]"}], "]"}], ":=", "\n", "  ", 
                     RowBox[{"normalizeSlots", "@", RowBox[{"EBNFSequence", 
                         "[", "a", "]"}]}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"BuildEBNFGrammarValue", "[", RowBox[
                        {RowBox[{"Verbatim", "[", "Repeated", "]"}], "[", 
                         "a_", "]"}], "]"}], ":=", "\n", "  ", RowBox[
                      {"normalizeSlots", "@", RowBox[{"EBNFRepeated", "[", 
                         "a", "]"}]}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"BuildEBNFGrammarValue", "[", RowBox[
                        {RowBox[{"Verbatim", "[", "Optional", "]"}], "[", 
                         RowBox[{"a_", ",", " ", "b_"}], "]"}], "]"}], ":=", 
                     "\n", "  ", RowBox[{"normalizeSlots", "@", RowBox[
                        {"EBNFOptional", "[", RowBox[{"a", ",", " ", "b"}], 
                         "]"}]}]}], ";"}], "\n", RowBox[{RowBox[
                    {"BuildEBNFGrammarValue", "~", "SetAttributes", "~", 
                     RowBox[{"{", RowBox[{"HoldAll", ",", " ", 
                         "SequenceHold"}], "}"}]}], ";"}]}], "CodeInput"]}, 
             Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]BuildEBNFGrammarSymbol\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"BuildEBNFGrammarSymbol", "[", 
                       RowBox[{"s", ":", "_Symbol"}], "]"}], ":=", "\n", 
                     "  ", RowBox[{"{", RowBox[{"_SymbolName", "[", "s", 
                         "]"}], "}"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"BuildEBNFGrammarSymbol", "[", RowBox[
                        {"s", ":", "_String"}], "]"}], ":=", "\n", "  ", 
                     RowBox[{"{", "_s", "}"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"BuildEBNFGrammarSymbol", "[", RowBox[
                        {"{", RowBox[{"e_", ",", " ", "ops___"}], "}"}], 
                       "]"}], ":=", "\n", "  ", RowBox[{"{", RowBox[
                        {RowBox[{"BuildEBNFGrammarSymbol", "[", "e", "]"}], 
                         ",", " ", "ops"}], "}"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"BuildEBNFGrammarSymbol", "[", "e_", 
                       "]"}], ":=", "\n", "\t", RowBox[{"{", "e", "}"}]}], 
                   ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]BuildEBNFGrammarRule\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"BuildEBNFGrammarRule", "[", 
                       RowBox[{RowBox[{"(", RowBox[{"Rule", "|", 
                          "RuleDelayed"}], ")"}], "[", RowBox[{"r_", ",", 
                          " ", "v_"}], "]"}], "]"}], ":=", "\n", "  ", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"sym", 
                          "=", RowBox[{"BuildEBNFGrammarSymbol", "[", "r", 
                          "]"}]}], "}"}], ",", "\n", "    ", RowBox[
                          {"EBNFRule", "[", RowBox[{RowBox[{"sym", "[", 
                          RowBox[{"[", "1", "]"}], "]"}], ",", " ", RowBox[
                          {"BuildEBNFGrammarValue", "[", "v", "]"}], ",", 
                          " ", RowBox[{"Sequence", "@@", RowBox[{"Rest", "[", 
                          "sym", "]"}]}]}], "]"}]}], "\n", "    ", "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"BuildEBNFGrammarRule", "[", "e_EBNFRule", "]"}], 
                     ":=", "\n", "  ", "e"}], ";"}], "\n", RowBox[
                  {"BuildEBNFGrammarRule", "~", "SetAttributes", "~", 
                   RowBox[{"{", RowBox[{"HoldAll", ",", " ", 
                       "SequenceHold"}], "}"}]}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]BuildEBNFGrammar\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"BuildEBNFGrammar", "[", RowBox[
                        {"rules", ":", RowBox[{"{", RowBox[{RowBox[{"(", 
                          RowBox[{"_RuleDelayed", "|", "_Rule", "|", 
                          "_EBNFRule"}], ")"}], ".."}], "}"}]}], "]"}], ":=", 
                     "\n", "  ", RowBox[{"Module", "[", "\n", "    ", 
                       RowBox[{RowBox[{"{", "grammarStructs", "}"}], ",", 
                         "\n", "    ", RowBox[{RowBox[{"grammarStructs", " ", 
                          "=", " ", RowBox[{"BuildEBNFGrammarRule", "/@", 
                          "rules"}]}], ";", "\n", "    ", RowBox[{"(*", " ", 
                          RowBox[{"allows", " ", "us", " ", "to", " ", 
                          "reuse", " ", "struct", " ", "names"}], " ", 
                          "*)"}], "\n", "    ", RowBox[{"<|", "\n", "      ", 
                          RowBox[{"\"Rules\"", "->", "\n", "        ", RowBox[
                          {"Thread", "[", "\n", "          ", RowBox[
                          {"EBNFRule", "[", "\n", "            ", RowBox[
                          {RowBox[{"grammarStructs", "[", RowBox[{"[", RowBox[
                          {"All", ",", " ", "1"}], "]"}], "]"}], ",", "\n", 
                          "            ", RowBox[{RowBox[{"grammarStructs", 
                          "[", RowBox[{"[", RowBox[{"All", ",", " ", "2"}], 
                          "]"}], "]"}], " ", "//.", " ", "\n", 
                          "              ", RowBox[{"Map", "[", RowBox[
                          {RowBox[{RowBox[{RowBox[{"Verbatim", "[", RowBox[
                          {"Replace", "[", RowBox[{RowBox[{"#", "[", RowBox[
                          {"[", "1", "]"}], "]"}], ",", " ", RowBox[{RowBox[
                          {"{", RowBox[{"l_", ",", " ", "___"}], "}"}], 
                          "\[RuleDelayed]", "l"}]}], "]"}], "]"}], "\[Rule]", 
                          RowBox[{"#", "[", RowBox[{"[", "2", "]"}], "]"}]}], 
                          "&"}], ",", " ", "grammarStructs"}], "]"}]}]}], 
                          "\n", "            ", "]"}], "\n", "          ", 
                          "]"}]}], "\n", "      ", "|>"}]}]}], "\n", "    ", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"BuildEBNFGrammar", "[", "a_Association", "]"}], ":=", 
                     "\n", "  ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"KeyExistsQ", "[", RowBox[{"a", ",", " ", 
                          "\"Rules\""}], "]"}], ",", " ", "a", ",", " ", 
                         RowBox[{"BuildEBNFGrammar", "[", RowBox[{"Normal", 
                          "@", "a"}], "]"}]}], "]"}]}], ";"}]}], 
               "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]BuildEBNFLexer\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]CollectEBNFTokens\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tDetermines the necessary set of tokens \
to feed to the tokenizer to build the grammar\n\[RightFloor]", "Text", 
               Evaluatable -> True], Cell[BoxData[{RowBox[
                  {RowBox[{RowBox[{"CollectEBNFTokens", "[", "e_EBNFGrammar", 
                       "]"}], ":=", "\n", "  ", RowBox[{"CollectEBNFTokens", 
                       "[", RowBox[{"e", "[", "\"Rules\"", "]"}], "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[{"CollectEBNFTokens", 
                       "[", "rules_List", "]"}], ":=", "\n", "  ", RowBox[
                      {"Replace", "[", "\n", "    ", RowBox[{"rules", ",", 
                         "\n", "    ", RowBox[{"{", "\n", "      ", RowBox[
                          {RowBox[{RowBox[{"EBNFRule", "[", "\n", "        ", 
                          RowBox[{"_", ",", "\n", "        ", RowBox[
                          {"EBNFSequence", "[", RowBox[{"d1_", ",", " ", 
                          RowBox[{RowBox[{"Verbatim", "[", "___", "]"}], "|", 
                          RowBox[{"Verbatim", "[", "__", "]"}]}], ",", " ", 
                          "d2_"}], "]"}], ",", "\n", "        ", "ops___"}], 
                          "\n", "        ", "]"}], "\[RuleDelayed]", RowBox[
                          {"Sequence", "@@", RowBox[{"Map", "[", RowBox[
                          {RowBox[{RowBox[{"{", RowBox[{"#", ",", " ", 
                          "ops"}], "}"}], "&"}], ",", " ", RowBox[{"{", 
                          RowBox[{"d1", ",", " ", "d2"}], "}"}]}], "]"}]}]}], 
                          ",", "\n", "      ", RowBox[{RowBox[{"EBNFRule", 
                          "[", RowBox[{"_", ",", " ", "\n", "        ", 
                          RowBox[{"EBNFSequence", "[", RowBox[{"head_String", 
                          ",", " ", "___"}], "]"}], ",", " ", "ops___"}], 
                          "]"}], "\[RuleDelayed]", RowBox[{"{", RowBox[
                          {"head", ",", " ", "ops"}], "}"}]}], ",", "\n", 
                          "      ", RowBox[{RowBox[{"EBNFRule", "[", RowBox[
                          {"_", ",", " ", "\n", "        ", RowBox[
                          {"EBNFSequence", "[", "args__", "]"}], ",", " ", 
                          "ops___"}], "]"}], "\[RuleDelayed]", RowBox[{"{", 
                          RowBox[{RowBox[{"FirstCase", "[", RowBox[{RowBox[
                          {"{", "args", "}"}], ",", " ", "_String"}], "]"}], 
                          ",", " ", "ops"}], "}"}]}], ",", "\n", "      ", 
                          RowBox[{RowBox[{"EBNFRule", "[", RowBox[{"_", ",", 
                          " ", "e_", ",", " ", "ops___"}], "]"}], 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"e", ",", 
                          " ", "ops"}], "}"}]}], ",", "\n", "      ", RowBox[
                          {"s_String", "\[RuleDelayed]", RowBox[{"{", "s", 
                          "}"}]}], ",", "\n", "      ", RowBox[{"_", 
                          "\[Rule]", "Nothing"}]}], "\n", "      ", "}"}], 
                         ",", "\n", "    ", "1"}], "\n", "    ", "]"}]}], 
                   ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]BuildEBNFLexer\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"BuildEBNFLexer", "[", 
                      "e_EBNFGrammar", "]"}], ":=", "\n", "  ", RowBox[
                     {"LexerObject", "[", RowBox[{"Flatten", "@", RowBox[
                         {"CollectEBNFTokens", "[", "e", "]"}]}], "]"}]}], 
                  ";"}]], "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]BuildEBNFParser\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]CollectEBNFTokenPatterns\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tNeed a good way to go from simple rules \
to the full spec\n\[RightFloor]", "Text", Evaluatable -> True], 
              Cell[BoxData[RowBox[{RowBox[{"collectTokenBlockTypes", "[", 
                    "rules_", "]"}], ":=", "\n", "  ", RowBox[{"Replace", 
                    "[", "\n", "    ", RowBox[{"rules", ",", "\n", "    ", 
                      RowBox[{"{", "\n", "      ", RowBox[{RowBox[{RowBox[
                          {"EBNFSequence", "[", RowBox[{"start_", ",", " ", 
                          RowBox[{"Verbatim", "[", "___", "]"}], ",", " ", 
                          "end_"}], "]"}], "\[RuleDelayed]", "\n", 
                          "        ", RowBox[{"{", RowBox[{"\"Delimited\"", 
                          ",", " ", RowBox[{"{", RowBox[{"start", ",", " ", 
                          "end"}], "}"}]}], "}"}]}], ",", "\n", "     ", 
                          RowBox[{RowBox[{"EBNFSequence", "[", RowBox[{"_", 
                          ",", " ", "op_String", ",", " ", "_"}], "]"}], 
                          ":>", "\n", "        ", "\"Operator\""}], ",", 
                          "\n", "     ", RowBox[{RowBox[{"EBNFSequence", "[", 
                          RowBox[{"head_String", ",", " ", "body__"}], "]"}], 
                          "\[RuleDelayed]", "\n", "        ", RowBox[{"{", 
                          RowBox[{"\"Structured\"", ",", " ", RowBox[
                          {"collectEBNFTokens", "[", RowBox[{"{", RowBox[
                          {"head", ",", " ", "body"}], "}"}], "]"}]}], 
                          "}"}]}], ",", "\n", "      ", RowBox[{"_", 
                          "\[Rule]", "Nothing"}]}], "\n", "      ", "}"}], 
                      ",", "\n", "    ", "1"}], "\n", "    ", "]"}]}]], 
               "CodeInput"], Cell[BoxData[{RowBox[{RowBox[{RowBox[
                      {"CollectEBNFTokenPatterns", "[", "e_EBNFGrammar", 
                       "]"}], ":=", "\n", "  ", RowBox[
                      {"CollectEBNFTokenPatterns", "[", RowBox[{"e", "[", 
                         "\"Rules\"", "]"}], "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"CollectEBNFTokenPatterns", "[", 
                       "rules_List", "]"}], ":=", "\n", "  ", RowBox[
                      {"MapThread", "[", "\n", "    ", RowBox[{RowBox[
                          {RowBox[{"<|", "\n", "      ", RowBox[{RowBox[
                          {"\"Token\"", "\[Rule]", RowBox[{"If", "[", RowBox[
                          {RowBox[{"ListQ", "@", "#"}], ",", " ", RowBox[
                          {"First", "[", "#", "]"}], ",", " ", "#"}], 
                          "]"}]}], ",", "\n", "      ", RowBox[
                          {"\"BlockType\"", "\[Rule]", "#2"}], ",", "\n", 
                          "      ", RowBox[{"Sequence", "@@", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"ListQ", "@", "#"}], ",", " ", 
                          RowBox[{"Rest", "[", "#", "]"}], ",", " ", RowBox[
                          {"{", "}"}]}], "]"}]}]}], "\n", "      ", "|>"}], 
                          "&"}], ",", "\n", "    ", RowBox[{"{", "\n", 
                          "      ", RowBox[{"CollectEBNFTokens", ",", "\n", 
                          "      ", RowBox[{"collectTokenBlockTypes", "[", 
                          RowBox[{"rules", "[", RowBox[{"[", RowBox[{"All", 
                          ",", " ", "2"}], "]"}], "]"}], "]"}]}], "\n", 
                          "      ", "}"}]}], "\n", "    ", "]"}]}], ";"}]}], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]BuildEBNFParser\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tBuilds a ParserObject that can handle \
the specified EBNF grammar\n\[RightFloor]", "Text", Evaluatable -> True], 
              Cell[BoxData[RowBox[{RowBox[{"BuildEBNFParser", "[", 
                    "e_EBNFGrammar", "]"}], ":=", "\n", "  ", RowBox[
                   {"Module", "[", RowBox[{RowBox[{"{", RowBox[{RowBox[
                          {"lexer", "=", RowBox[{"BuildEBNFLexer", "[", "e", 
                          "]"}]}], ",", " ", "p"}], "}"}], ",", "\n", "    ", 
                      RowBox[{RowBox[{"p", " ", "=", " ", RowBox[
                          {"ParserObject", "[", "\n", "      ", RowBox[
                          {"lexer", ",", "\n", "      ", RowBox[
                          {"CollectEBNFTokenPatterns", "[", "e", "]"}]}], 
                          "\n", "      ", "]"}]}], ";", "\n", "    ", 
                        RowBox[{"InterfaceModify", "[", RowBox[
                          {"ParserObject", ",", "\n", "      ", "p", ",", 
                          "\n", "      ", RowBox[{RowBox[{"Append", "[", 
                          RowBox[{"#", ",", " ", RowBox[{"\"Grammar\"", 
                          "\[Rule]", "e"}]}], "]"}], "&"}]}], "\n", "      ", 
                          "]"}]}]}], "\n", "    ", "]"}]}]], "CodeInput"]}, 
             Open]]}, Open]]}, Open]], 
     Cell[BoxData[RowBox[{RowBox[{"End", "[", "]"}], ";"}]], 
      "InputSection"]}, Open]], Cell["", "SectionSeparator"]}, 
 FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
 StyleDefinitions -> FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
   CharacterEncoding -> "UTF-8"]]
