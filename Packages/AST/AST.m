(* ::Package:: *)

(* Autogenerated Package *)

ASTNode::usage="Symbolic rep of an AST node";


ConstructASTObject::usage="";
AddASTNode::usage="";
MakeASTNode::usage="";
GetASTNode::usage="";
GetASTNodeProperty::usage="";
AddASTNodeData::usage="";


Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*ConstructASTObject*)



ConstructASTObject[]:=
  <|
    "Tree"-><|
      "Children"->{},
      "Root"->True
      |>
    |>;
ConstructASTObject[a_Association]:=
  If[KeyExistsQ[a, "Tree"],
    a,
    <|"Tree"->a|>
    ]


(* ::Subsubsection::Closed:: *)
(*AtomicASTNodeQ*)



AtomicASTNodeQ[node_]:=
  node["Children"]===None;


(* ::Subsubsection::Closed:: *)
(*MakeASTNode*)



MakeASTNode//Clear
MakeASTNode["Atomic", data_, token_:None]:=
  <|
    "Children"->None,
    "Body"->data,
    "Token"->token,
    "Root"->False
    |>;
MakeASTNode["Compound", data_, token_:None]:=
  <|
    "Children"->Flatten@{data},
    "Body"->None,
    "Token"->token,
    "Root"->False
    |>;
MakeASTNode[data_]:=
  If[!KeyExistsQ[data, "Children"],
    MakeASTNode[
      If[data["TokenType"]==="BlockOpener", "Compound", "Atomic"],
      data,
      data["Token"]
      ],
    data
    ]


(* ::Subsubsection::Closed:: *)
(*GetASTNode*)



GetASTNode[ast_Association, part:{__Integer}]:=
  ast[[Sequence@@Riffle[part, "Children"]]];
GetASTNode[ast_ASTObject, part_]:=
  GetASTNode[ast["Tree"], part]


(* ::Subsubsection::Closed:: *)
(*AddASTNodeData*)



AddASTNodeData[node_, data_]:=
  ReplacePart[node, "Children"->Append[node["Children"], data]]


(* ::Subsubsection::Closed:: *)
(*AddASTNode*)



(* ::Text:: *)
(*
	Basically this needs to be able to determine what the type of data is (syntactically), whether that means it should become an atomic or compound node, and then insert in the AST at the current node position
	
	The tree argument can also actually just be a node
*)



AddASTNode[tree_, data_]:=
  AddASTNodeData[tree, MakeASTNode[data]]


(* ::Subsubsection::Closed:: *)
(*GetASTNodeProperty*)



(* ::Text:: *)
(*
	Only supports a finite number of properties but is where new properties should be put
*)



GetASTNodeProperty[tree_, "Children"]:=
  tree["Children"];
GetASTNodeProperty[tree_, "ChildCount"]:=
  Length@tree["Children"];


(* ::Subsection:: *)
(*ASTNode*)



RegisterInterface[
  ASTNode,
  {"Children", "Root", "Token"},
  "Constructor"->MakeASTNode
  ]


(* ::Text:: *)
(*
	I\[CloseCurlyQuote]m putting this here so I can eventually expand upon it if it turns out that OOP for an AST is useful
*)



End[];



