(* ::Package:: *)

(* Autogenerated Package *)

ConstructLexerObject::usage="Constructs a LexerObject";
LexerToken::usage="Symbolic representation of a lexed token";
ConstructLexToken::usage="";


Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*ConstructLexerObject*)



(* ::Subsubsubsection::Closed:: *)
(*prepTokenSpec*)



prepTokenSpec//Clear;
prepTokenSpec[c_String]:=
  <|"Token"->c|>;
prepTokenSpec[{c_String, "String"}]:=
  prepTokenSpec[{c, "String", c, "\\"}];
prepTokenSpec[{c_String, "String", end_}]:=
  prepTokenSpec[{c, "String", end, "\\"}];
prepTokenSpec[{c_String, "String", end_, escape_}]:=
  <|
    "Token"->c, 
    "Handler"->readStringToken[c, end, escape]
    |>;
prepTokenSpec[a_Association]:=
  a;


(* ::Subsubsubsection::Closed:: *)
(*ConstructLexerObject*)



ConstructLexerObject[
  tokens_Association
  ]:=
  Module[
    {
      tokDat = prepTokenSpec/@tokens["Tokens"],
      toks,
      def = Lookup[tokens, "DefaultHandler", LexerToken]
      },
    toks = Lookup[tokDat, "Token"];
    <|
      "Tokens"->
        <|
          "Characters"->toks,
          "Handlers"->AssociationThread[toks, Lookup[tokDat, "Handler", def]]
          |>
      |>
    ];
 ConstructLexerObject[
  tokens_List
  ]:=
  ConstructLexerObject[
    <|"Tokens"->tokens|>
    ]


(* ::Subsection:: *)
(*LexerToken*)



(* ::Subsubsection::Closed:: *)
(*LexerToken*)



RegisterInterface[
  LexerToken,
  {
    "Stream",
    "Body",
    "Token"
    },
  "Constructor"->ConstructLexToken
  ];


(* ::Subsubsection::Closed:: *)
(*ConstructLexToken*)



ConstructLexToken[s_, b_, t_]:=
  <|
    "Stream"->s,
    "Body"->b,
    "Token"->t
    |>


End[];



