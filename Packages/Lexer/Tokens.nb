Notebook[{Cell[CellGroupData[{Cell["\[LeftCeiling]Tokens\[RightFloor]", 
      "CodeSection", Evaluatable -> True], 
     Cell[BoxData[RowBox[{RowBox[{RowBox[{"TokenStream", "::", "usage"}], 
           "=", "\"An object representing a stream of tokens\""}], ";"}]], 
      "CodeInput"], Cell[BoxData[
       {RowBox[{RowBox[{RowBox[{"SetTokenizerCheckpoint", "::", "usage"}], 
            "=", "\"Sets the Tokenizer checkpoint\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"ResetTokenizerCheckpoint", "::", "usage"}], 
            "=", "\"Reverts the Tokenizer checkpoint\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"WithTokenizerCheckpoint", "::", "usage"}], 
            "=", "\"Wrapper for tokenizing\""}], ";"}]}], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TokenRead", "::", "usage"}], "=", 
            "\"Pulls n tokens out of a TokenStream\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TokenStreamer", "::", "usage"}], "=", 
            "\"Lower-level object for faster token streaming\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[RowBox[
        {RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
      "InputSection"], Cell[CellGroupData[
       {Cell["\[LeftCeiling]TokenStream\[RightFloor]", "CodeSubsection", 
         Evaluatable -> True], Cell[BoxData[RowBox[{"RegisterInterface", "[", 
            "\n", "  ", RowBox[{"TokenStream", ",", "\n", "  ", 
              RowBox[{"{", "\n", "    ", RowBox[{"\"Tokens\"", ",", "\n", 
                  "    ", "\"Stream\""}], "\n", "    ", "}"}], ",", "\n", 
              "  ", RowBox[{"\"Constructor\"", "\[Rule]", 
                "buildTokenStream"}]}], "\n", "  ", "]"}]], "CodeInput"], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]buildTokenStream\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"buildTokenStream", "[", 
                    RowBox[{"l_LexerObject", ",", " ", "i_InputStream"}], 
                    "]"}], ":=", "\n", "  ", RowBox[{"<|", RowBox[
                     {RowBox[{"\"Tokens\"", "\[Rule]", RowBox[{"l", "[", 
                          "\"Tokens\"", "]"}]}], ",", " ", RowBox[
                       {"\"Stream\"", "\[Rule]", "i"}]}], "|>"}]}], ";"}], 
              "\n", RowBox[{RowBox[{RowBox[{"buildTokenStream", "[", 
                    RowBox[{"l_LexerObject", ",", " ", RowBox[{"s_String", 
                        "?", RowBox[{"(", RowBox[{"Not", "@*", 
                          "FileExistsQ"}], ")"}]}]}], "]"}], ":=", "\n", 
                  "  ", RowBox[{"buildTokenStream", "[", RowBox[{"l", ",", 
                      " ", RowBox[{"StringToStream", "[", "s", "]"}]}], 
                    "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"buildTokenStream", "[", RowBox[{"l_LexerObject", 
                      ",", " ", RowBox[{"s_String", "?", RowBox[{"(", 
                          "FileExistsQ", ")"}]}]}], "]"}], ":=", "\n", " ", 
                  RowBox[{"buildTokenStream", "[", RowBox[{"l", ",", " ", 
                      RowBox[{"OpenRead", "[", "s", "]"}]}], "]"}]}], 
                ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Methods\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{RowBox[{"InterfaceMethod", 
                      "[", "TokenStream", "]"}], "@", "\n", "  ", RowBox[
                     {RowBox[{"t_TokenStream", "[", "\"Read\"", "]"}], "[", 
                      RowBox[{"n", ":", RowBox[{"_Integer", "?", 
                          "Positive"}], ":", "1"}], "]"}]}], ":=", "\n", 
                  "    ", RowBox[{"TokenRead", "[", RowBox[{"t", ",", " ", 
                      "n"}], "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{RowBox[{"InterfaceMethod", "[", "TokenStream", 
                      "]"}], "@", "\n", "  ", RowBox[{RowBox[
                       {"t_TokenStream", "[", "\"Streamer\"", "]"}], "[", 
                      "]"}]}], ":=", "\n", "    ", RowBox[{"TokenStreamer", 
                    "[", "t", "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{RowBox[{"InterfaceMethod", "[", "TokenStream", 
                      "]"}], "@", "\n", "  ", RowBox[{RowBox[
                       {"t_TokenStream", "[", "\"Close\"", "]"}], "[", 
                      "]"}]}], ":=", "\n", "    ", RowBox[{"Close", "@", 
                    RowBox[{"t", "[", "\"Stream\"", "]"}]}]}], ";"}]}], 
            "CodeInput"]}, Open]]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]TokenRead\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]$checkpoints\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tMight be better to do with Language`ExpressionStore \
?\n\tWe\[CloseCurlyQuote]re gonna manage this under the assumption that if \
you peek ahead and then reset you want to be able to jump back to where you \
were post peek...?\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"If", "[", RowBox[{RowBox[
                     {"!", RowBox[{"AssociationQ", "[", "$checkpoints", 
                        "]"}]}], ",", " ", RowBox[{"$checkpoints", "=", 
                      RowBox[{"<|", "|>"}]}]}], "]"}], ";"}], "\n", 
              RowBox[{RowBox[{"If", "[", RowBox[{RowBox[{"!", RowBox[
                       {"AssociationQ", "[", "$peekpoints", "]"}]}], ",", 
                    " ", RowBox[{"$peekpoints", "=", RowBox[{"<|", 
                        "|>"}]}]}], "]"}], ";"}]}], "CodeInput"], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"SetTokenizerCheckpoint", 
                    "[", RowBox[{"stream_InputStream", ",", " ", RowBox[
                       {"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "]"}], 
                  ":=", "\n", "  ", RowBox[{"If", "[", RowBox[
                     {RowBox[{"dir", "===", "\"Backward\""}], ",", "\n", 
                      "    ", RowBox[{RowBox[{"$checkpoints", "[", "stream", 
                          "]"}], " ", "=", " ", RowBox[{"StreamPosition", 
                          "[", "stream", "]"}]}], ",", "\n", "    ", 
                      RowBox[{RowBox[{"$peekpoints", "[", "stream", "]"}], 
                        " ", "=", " ", RowBox[{"StreamPosition", "[", 
                          "stream", "]"}]}]}], "\n", "    ", "]"}]}], ";"}], 
              "\n", RowBox[{RowBox[{RowBox[{"SetTokenizerCheckpoint", "[", 
                    "\n", "  ", RowBox[{RowBox[{"TokenStreamer", "[", 
                        RowBox[{"{", RowBox[{"t_", ",", " ", "stream_", ",", 
                          " ", "handlers_", ",", " ", "seps_", ",", " ", 
                          "tokPuller_"}], "}"}], "]"}], ",", " ", "\n", "  ", 
                      RowBox[{"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "\n", 
                    "  ", "]"}], ":=", "\n", "  ", RowBox[
                   {"SetTokenizerCheckpoint", "[", RowBox[{"stream", ",", 
                      " ", "dir"}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"SetTokenizerCheckpoint", "[", "\n", 
                    "  ", RowBox[{"t_TokenStream", ",", " ", "\n", "  ", 
                      RowBox[{"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "\n", 
                    "  ", "]"}], ":=", "\n", "  ", RowBox[
                   {"SetTokenizerCheckpoint", "[", RowBox[{RowBox[{"t", "[", 
                        "\"Stream\"", "]"}], ",", " ", "dir"}], "]"}]}], 
                ";"}]}], "CodeInput"], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"ResetTokenizerCheckpoint", "[", 
                    RowBox[{"stream_InputStream", ",", " ", RowBox[{"dir", 
                        ":", RowBox[{"\"Forward\"", "|", "\"Backward\""}], 
                        ":", "\"Backward\""}]}], "]"}], ":=", "\n", "  ", 
                  RowBox[{"SetStreamPosition", "[", RowBox[{"stream", ",", 
                      " ", "\n", "    ", RowBox[{RowBox[{"If", "[", RowBox[
                          {RowBox[{"dir", "===", "\"Backward\""}], ",", "\n", 
                          "      ", "$checkpoints", ",", "\n", "      ", 
                          "$peekpoints"}], "\n", "      ", "]"}], "[", 
                        "stream", "]"}]}], "\n", "    ", "]"}]}], ";"}], 
              "\n", RowBox[{RowBox[{RowBox[{"ResetTokenizerCheckpoint", "[", 
                    "\n", "  ", RowBox[{RowBox[{"TokenStreamer", "[", 
                        RowBox[{"{", RowBox[{"t_", ",", " ", "stream_", ",", 
                          " ", "handlers_", ",", " ", "seps_", ",", " ", 
                          "tokPuller_"}], "}"}], "]"}], ",", " ", "\n", "  ", 
                      RowBox[{"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "\n", 
                    "  ", "]"}], ":=", "\n", "  ", RowBox[
                   {"ResetTokenizerCheckpoint", "[", RowBox[{"stream", ",", 
                      " ", "dir"}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"ResetTokenizerCheckpoint", "[", "\n", 
                    "  ", RowBox[{"t_TokenStream", ",", " ", "\n", "  ", 
                      RowBox[{"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "\n", 
                    "  ", "]"}], ":=", "\n", "  ", RowBox[
                   {"ResetTokenizerCheckpoint", "[", RowBox[{RowBox[
                       {"t", "[", "\"Stream\"", "]"}], ",", " ", "dir"}], 
                    "]"}]}], ";"}]}], "CodeInput"], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WithTokenizerCheckpoint", 
                    "[", RowBox[{"stream_InputStream", ",", " ", "expr_"}], 
                    "]"}], ":=", "\n", "  ", RowBox[{"Block", "[", "\n", 
                    "    ", RowBox[{RowBox[{"{", "\n", "      ", RowBox[
                         {RowBox[{"$checkpoints", " ", "=", " ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"!", RowBox[
                          {"AssociationQ", "[", "$checkpoints", "]"}]}], ",", 
                          " ", RowBox[{"<|", "|>"}], ",", " ", 
                          "$checkpoints"}], "]"}]}], ",", "\n", "      ", 
                          RowBox[{"$peekpoints", " ", "=", " ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"!", RowBox[
                          {"AssociationQ", "[", "$peekpoints", "]"}]}], ",", 
                          " ", RowBox[{"<|", "|>"}], ",", " ", 
                          "$peekpoints"}], "]"}]}]}], "\n", "      ", "}"}], 
                      ",", "\n", "    ", RowBox[{RowBox[
                         {"SetTokenizerCheckpoint", "[", "stream", "]"}], 
                        ";", "\n", "    ", "expr"}]}], "\n", "    ", "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[
                   {"WithTokenizerCheckpoint", "[", "\n", "  ", RowBox[
                     {RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                          {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                          ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                        "]"}], ",", " ", "\n", "  ", "expr_"}], "\n", "  ", 
                    "]"}], ":=", "\n", "  ", RowBox[
                   {"WithTokenizerCheckpoint", "[", RowBox[{"stream", ",", 
                      " ", "expr"}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"WithTokenizerCheckpoint", "[", "\n", 
                    "  ", RowBox[{"t_TokenStream", ",", " ", "\n", "  ", 
                      "expr_"}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                  RowBox[{"WithTokenizerCheckpoint", "[", RowBox[
                     {RowBox[{"t", "[", "\"Stream\"", "]"}], ",", " ", 
                      "expr"}], "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {"WithTokenizerCheckpoint", "~", "SetAttributes", "~", 
                  "HoldRest"}], ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]readStringToken\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"readStringToken", "[", 
                   RowBox[{"tok_", ",", " ", RowBox[{"escape_:", 
                       "\"\\\\\""}]}], "]"}], "[", RowBox[{"stream_", ",", 
                   " ", "body_", ",", " ", "token_"}], "]"}], ":=", "\n", 
               "  ", RowBox[{"Module", "[", "\n", "    ", RowBox[
                  {RowBox[{"{", "\n", "      ", RowBox[{"tmp", ",", "\n", 
                       "      ", RowBox[{"str", " ", "=", " ", RowBox[
                          {"Read", "[", RowBox[{"stream", ",", " ", "Record", 
                          ",", " ", RowBox[{"RecordSeparators", "\[Rule]", 
                          RowBox[{"{", "tok", "}"}]}]}], "]"}]}]}], "\n", 
                     "      ", "}"}], ",", "\n", "    ", RowBox[
                    {RowBox[{"While", "[", RowBox[{RowBox[{RowBox[{"StringQ", 
                          "[", "str", "]"}], "&&", RowBox[{"StringEndsQ", 
                          "[", RowBox[{"str", ",", " ", "escape"}], "]"}]}], 
                         ",", "\n", "      ", RowBox[{RowBox[{"tmp", " ", 
                          "=", " ", RowBox[{"Read", "[", RowBox[{"stream", 
                          ",", " ", "Record", ",", " ", RowBox[
                          {"RecordSeparators", "\[Rule]", RowBox[{"{", "tok", 
                          "}"}]}]}], "]"}]}], ";", "\n", "      ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"tmp", "===", 
                          "EndOfFile"}], ",", " ", RowBox[{"Break", "[", 
                          "]"}]}], "]"}], ";", "\n", "      ", RowBox[{"str", 
                          " ", "=", " ", RowBox[{"str", "<>", "tok", "<>", 
                          "tmp"}]}], ";"}]}], "\n", "      ", "]"}], ";", 
                     "\n", "    ", "str"}]}], "\n", "    ", "]"}]}]], 
            "CodeInput"]}, Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]readLookAhead\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"readLookAhead", "[", 
                    "lookAheadDispatcher_", "]"}], ":=", "\n", "  ", 
                  RowBox[{"readLookAhead", "[", RowBox[
                     {"lookAheadDispatcher", ",", " ", RowBox[{"tokenPuller", 
                        "[", RowBox[{"Keys", "[", "lookAheadDispatcher", 
                          "]"}], "]"}]}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"readLookAhead", "[", RowBox[
                     {"lookAheadDispatcher_", ",", " ", "tokenPuller_"}], 
                    "]"}], "[", RowBox[{"stream_", ",", " ", "body_", ",", 
                    " ", "token_"}], "]"}], ":=", "\n", "  ", RowBox[
                 {RowBox[{"lookAheadDispatcher", "[", RowBox[{"tokenPuller", 
                      "[", "stream", "]"}], "]"}], "[", RowBox[{"stream", 
                    ",", " ", "body", ",", " ", "token"}], "]"}]}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]TokenStreamer\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tDesigned to be as minimal overhead as can still be \
convenient\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TokenStreamer", "[", 
                    "t_TokenStream", "]"}], ":=", "\n", "  ", RowBox[
                   {"Module", "[", RowBox[{RowBox[{"{", RowBox[{RowBox[
                          {"stream", "=", RowBox[{"t", "[", "\"Stream\"", 
                          "]"}]}], ",", " ", RowBox[{"spec", "=", RowBox[
                          {"prepTokenHandlers", "@", RowBox[{"t", "[", 
                          "\"Tokens\"", "]"}]}]}]}], "}"}], ",", "\n", 
                      "    ", RowBox[{"TokenStreamer", "[", RowBox[{"stream", 
                          ",", " ", "spec", ",", " ", "t"}], "]"}]}], "\n", 
                    "    ", "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"TokenStreamer", "[", RowBox[{"stream_", ",", " ", 
                      "spec_", ",", " ", "t_"}], "]"}], ":=", "\n", "  ", 
                  RowBox[{"TokenStreamer", "[", RowBox[{"{", "\n", "    ", 
                      RowBox[{"t", ",", "\n", "    ", "stream", ",", "\n", 
                        "    ", RowBox[{"spec", "[", "\"Handlers\"", "]"}], 
                        ",", " ", "\n", "    ", RowBox[{"spec", "[", 
                          "\"Characters\"", "]"}], ",", "\n", "    ", 
                        RowBox[{"tokenPuller", "[", RowBox[{"spec", "[", 
                          "\"Characters\"", "]"}], "]"}]}], "\n", "    ", 
                      "}"}], "]"}]}], ";"}]}], "CodeInput"], 
           Cell[BoxData[RowBox[{RowBox[{"TokenStreamerRead", "[", 
                 RowBox[{RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                        {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                         ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                     "]"}], ",", " ", "n_"}], "]"}], ":=", "\n", "  ", RowBox[
                {"Module", "[", RowBox[{RowBox[{"{", RowBox[{"body", ",", 
                       " ", "tmp", ",", " ", "token", ",", " ", "spos"}], 
                     "}"}], ",", "\n", "    ", RowBox[{"Table", "[", "\n", 
                     "      ", RowBox[{RowBox[{RowBox[{"token", " ", "=", 
                          " ", "$Failed"}], ";", "\n", "      ", RowBox[
                          {"body", " ", "=", " ", "EndOfFile"}], ";", "\n", 
                         "      ", RowBox[{"While", "[", RowBox[{RowBox[
                          {"token", "===", "$Failed"}], ",", "\n", 
                          "        ", RowBox[{"If", "[", RowBox[{RowBox[
                          {RowBox[{"StreamPosition", "[", "stream", "]"}], 
                          "==", "0"}], ",", "\n", "  ", "        ", RowBox[
                          {"(*", " ", "\n", "  ", "                    ", 
                          RowBox[{"we", " ", "need", " ", "a", " ", 
                          "secondary", " ", "handling", " ", "mechanism", 
                          " ", "to", " ", "ensure", "\n", "  ", 
                          "                      ", "that", " ", "we", " ", 
                          RowBox[{"don", "'"}], "t", " ", "miss", " ", 
                          "tokens", " ", "at", " ", "the", " ", "very", " ", 
                          "start", " ", "of", " ", "the", " ", "stream"}], 
                          "\n", "  ", "                    ", "*)"}], "\n", 
                          "          ", RowBox[{RowBox[{"tmp", " ", "=", " ", 
                          "\n", "           ", RowBox[{"Read", "[", RowBox[
                          {"stream", ",", " ", "Record", ",", "\n", "  ", 
                          "  ", "  ", "        ", RowBox[{"RecordSeparators", 
                          "\[Rule]", "seps"}]}], "\n", "  ", "            ", 
                          "]"}]}], ";", "\n", "          ", RowBox[{"spos", 
                          " ", "=", " ", RowBox[{"StreamPosition", "[", 
                          "stream", "]"}]}], ";", "\n", "          ", RowBox[
                          {"If", "[", RowBox[{RowBox[{RowBox[{"StringLength", 
                          "@", "tmp"}], "<", "spos"}], " ", RowBox[{"(*", 
                          " ", RowBox[{"we", " ", "skipped", " ", "a", " ", 
                          "thing"}], " ", "*)"}], ",", "\n", "            ", 
                          RowBox[{RowBox[{"SetStreamPosition", "[", RowBox[
                          {"stream", ",", " ", "0"}], "]"}], ";", "\n", 
                          "            ", RowBox[{"token", " ", "=", " ", 
                          RowBox[{"tokPuller", "[", "stream", "]"}]}], ";", 
                          "\n", "            ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"ListQ", "@", "token"}], ",", " ", "\n", 
                          "              ", RowBox[{RowBox[{"body", " ", "=", 
                          " ", RowBox[{"token", "[", RowBox[{"[", "2", "]"}], 
                          "]"}]}], ";", "\n", "  ", "            ", RowBox[
                          {"token", " ", "=", " ", RowBox[{"token", "[", 
                          RowBox[{"[", "1", "]"}], "]"}]}]}], ",", "\n", 
                          "              ", RowBox[{RowBox[{"body", " ", "=", 
                          " ", "\"\""}], ";"}]}], "\n", "              ", 
                          "]"}]}]}], "\n", "            ", "]"}]}], ",", 
                          "\n", "          ", RowBox[{"(*", " ", RowBox[
                          {"standard", " ", "mechanism", " ", "a", " ", 
                          "little", " ", "bit", " ", "simpler"}], " ", 
                          "*)"}], "\n", "          ", RowBox[{RowBox[{"tmp", 
                          " ", "=", " ", "\n", "           ", RowBox[{"Read", 
                          "[", RowBox[{"stream", ",", " ", "Record", ",", 
                          "\n", "  ", "  ", "  ", "        ", RowBox[
                          {"RecordSeparators", "\[Rule]", "seps"}]}], "\n", 
                          "  ", "            ", "]"}]}], ";", "\n", "  ", 
                          "        ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"tmp", "===", "EndOfFile"}], ",", " ", "\n", "  ", 
                          "  ", "  ", "      ", RowBox[{"Return", "[", "\n", 
                          "  ", "  ", "  ", "        ", RowBox[{RowBox[
                          {RowBox[{"handlers", "[", "EndOfFile", "]"}], "[", 
                          "\n", "  ", "  ", "  ", "          ", RowBox[{"t", 
                          ",", "\n", "  ", "  ", "  ", "          ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"StringQ", "@", 
                          "body"}], ",", " ", "body", ",", " ", 
                          "EndOfFile"}], "]"}], ",", "\n", "  ", "  ", "  ", 
                          "          ", "EndOfFile"}], "\n", "  ", "  ", 
                          "  ", "          ", "]"}], ",", "\n", "  ", 
                          "            ", "While"}], "\n", "  ", 
                          "            ", "]"}], ",", "\n", "            ", 
                          RowBox[{RowBox[{"token", " ", "=", " ", RowBox[
                          {"tokPuller", "[", "stream", "]"}]}], ";", "\n", 
                          "  ", "          ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"ListQ", "@", "token"}], ",", " ", "\n", 
                          "  ", "            ", RowBox[{RowBox[{"tmp", " ", 
                          "=", " ", RowBox[{"tmp", " ", "<>", " ", RowBox[
                          {"token", "[", RowBox[{"[", "2", "]"}], "]"}]}]}], 
                          ";", "\n", "  ", "            ", RowBox[{"token", 
                          " ", "=", " ", RowBox[{"token", "[", RowBox[{"[", 
                          "1", "]"}], "]"}]}], ";"}]}], "\n", "  ", 
                          "            ", "]"}]}]}], "\n", "  ", 
                          "          ", "]"}], ";", "\n", "  ", "        ", 
                          RowBox[{"body", " ", "=", " ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"StringQ", "@", "body"}], ",", " ", 
                          RowBox[{"body", "<>", "tmp"}], ",", " ", "tmp"}], 
                          "]"}]}]}]}], "\n", "          ", "]"}]}], "\n", 
                          "        ", "]"}], ";", "\n", "      ", RowBox[
                          {RowBox[{"handlers", "[", "token", "]"}], "[", 
                          "\n", "        ", RowBox[{"t", ",", "\n", 
                          "        ", "body", ",", "\n", "        ", 
                          "token"}], "\n", "        ", "]"}]}], ",", "\n", 
                       "      ", "n"}], "\n", "      ", "]"}]}], "\n", 
                 "    ", "]"}]}]], "CodeInput"], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{RowBox[{"(", "\n", "\t", 
                      RowBox[{"tks", ":", RowBox[{"HoldPattern", "[", 
                          RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                          {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                          ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                          "]"}], "]"}]}], "\n", "\t", ")"}], "@", RowBox[
                     {"\"Read\"", "[", "n_", "]"}]}], ":=", "\n", "  ", 
                  RowBox[{"WithTokenizerCheckpoint", "[", "\n", "    ", 
                    RowBox[{"stream", ",", "\n", "    ", RowBox[
                       {"TokenStreamerRead", "[", RowBox[{"tks", ",", " ", 
                          "n"}], "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
              RowBox[{" ", RowBox[{RowBox[{RowBox[{RowBox[{"(", "\n", "\t", 
                        RowBox[{"tks", ":", RowBox[{"HoldPattern", "[", 
                          RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                          {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                          ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                          "]"}], "]"}]}], "\n", "\t", ")"}], "@", RowBox[
                       {"\"Read\"", "[", "]"}]}], ":=", "\n", "   ", 
                    RowBox[{RowBox[{"(", RowBox[{"tks", "@", RowBox[
                          {"\"Read\"", "[", "1", "]"}]}], ")"}], "[", 
                      RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "\n", 
              RowBox[{" ", RowBox[{RowBox[{RowBox[{RowBox[{"(", "\n", "\t", 
                        RowBox[{"tks", ":", RowBox[{"HoldPattern", "[", 
                          RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                          {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                          ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                          "]"}], "]"}]}], "\n", "\t", ")"}], "@", RowBox[
                       {"\"Peek\"", "[", "n_", "]"}]}], ":=", "\n", "   ", 
                    RowBox[{"WithTokenizerCheckpoint", "[", "\n", "     ", 
                      RowBox[{"stream", ",", "\n", "     ", RowBox[
                         {RowBox[{RowBox[{"(", RowBox[{RowBox[
                          {"ResetTokenizerCheckpoint", "[", "stream", "]"}], 
                          ";", " ", "#"}], ")"}], "&"}], "@", RowBox[
                          {"TokenStreamerRead", "[", RowBox[{"tks", ",", " ", 
                          "n"}], "]"}]}]}], "\n", "     ", "]"}]}], ";"}]}], 
              "\n", RowBox[{" ", RowBox[{RowBox[{RowBox[{RowBox[{"(", "\n", 
                        "\t", RowBox[{"tks", ":", RowBox[{"HoldPattern", "[", 
                          RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                          {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                          ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                          "]"}], "]"}]}], "\n", "\t", ")"}], "@", RowBox[
                       {"\"Peek\"", "[", "]"}]}], ":=", "\n", "   ", 
                    RowBox[{RowBox[{"(", RowBox[{"tks", "@", RowBox[
                          {"\"Peek\"", "[", "1", "]"}]}], ")"}], "[", 
                      RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]tokenRead\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[CellGroupData[
             {Cell["\[LeftCeiling]tokenPuller\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tPulls the real token off the stream. \
\n\tHas to be a bit careful about things like \
\[OpenCurlyDoubleQuote]for\[CloseCurlyDoubleQuote] and EOFs.\n\[RightFloor]", 
               "Text", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"tokenPuller", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"tokenPuller", "[", "tokens_", "]"}], 
                     ":=", "\n", "  ", RowBox[{"tokenPuller", "[", "\n", 
                       "    ", RowBox[{RowBox[{"AssociationThread", "[", 
                          RowBox[{"tokens", ",", " ", "None"}], "]"}], ",", 
                         " ", "\n", "    ", RowBox[{"Min", "[", RowBox[
                          {"StringLength", "/@", RowBox[{"Select", "[", 
                          RowBox[{"tokens", ",", " ", "StringQ"}], "]"}]}], 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{RowBox[{"tokenPuller", "[", RowBox[
                          {"tokSet_", ",", " ", "min_"}], "]"}], "[", 
                       "stream_", "]"}], ":=", "\n", "  ", RowBox[
                      {"pullTokenToo", "[", RowBox[{"stream", ",", " ", 
                         "tokSet", ",", " ", "min"}], "]"}]}], ";"}], "\n", 
                 RowBox[{"pullTokenToo", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{"pullTokenToo", "[", RowBox[{"stream_", ",", 
                       " ", "tokSet_", ",", " ", "minTok_"}], "]"}], ":=", 
                   "\n", "  ", RowBox[{"(*", " ", RowBox[{RowBox[{"gotta", 
                         " ", "figure", " ", "out", " ", "which", " ", 
                         "token", " ", "we", " ", "actually", " ", "got"}], 
                       "..."}], " ", "*)"}], "\n", "  ", RowBox[{"Module", 
                     "[", RowBox[{RowBox[{"{", RowBox[{"tok", ",", " ", 
                          "tmp", ",", " ", "spos", ",", " ", "spos2"}], 
                         "}"}], ",", "\n", "    ", RowBox[{RowBox[{"spos", 
                          " ", "=", " ", RowBox[{"StreamPosition", "[", 
                          "stream", "]"}]}], ";", "\n", "    ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"spos", ">", "0"}], 
                          ",", "\n", "      ", RowBox[{RowBox[{"tok", " ", 
                          "=", " ", RowBox[{"Read", "[", RowBox[{"stream", 
                          ",", " ", "Character"}], "]"}]}], ";", "\n", "  ", 
                          "    ", RowBox[{"spos2", " ", "=", " ", RowBox[
                          {"StreamPosition", "[", "stream", "]"}]}], ";", 
                          "\n", "  ", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"StringMatchQ", "[", RowBox[{"tok", ",", 
                          " ", "WordCharacter"}], "]"}], ",", " ", "\n", 
                          "  ", "      ", RowBox[{RowBox[{
                          "SetStreamPosition", "[", RowBox[{"stream", ",", 
                          " ", RowBox[{"spos", "-", "1"}]}], "]"}], ";", 
                          "\n", "  ", "      ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"!", RowBox[{"StringMatchQ", "[", RowBox[
                          {RowBox[{"Read", "[", RowBox[{"stream", ",", " ", 
                          "Character"}], "]"}], ",", " ", 
                          "WhitespaceCharacter"}], "]"}]}], ",", "\n", "  ", 
                          "        ", RowBox[{RowBox[{"SetStreamPosition", 
                          "[", RowBox[{"stream", ",", " ", "spos2"}], "]"}], 
                          ";", "\n", "  ", "        ", RowBox[{"Return", "[", 
                          RowBox[{RowBox[{"{", RowBox[{"$Failed", ",", " ", 
                          "tok"}], "}"}], ",", " ", "Module"}], "]"}]}], ",", 
                          "\n", "  ", "        ", RowBox[{
                          "SetStreamPosition", "[", RowBox[{"stream", ",", 
                          " ", "spos2"}], "]"}]}], "\n", "  ", "        ", 
                          "]"}]}]}], "\n", "  ", "      ", "]"}], ";", " ", 
                          "\n", "      ", RowBox[{"tok", " ", "=", " ", 
                          RowBox[{RowBox[{"Prepend", "[", "tok", "]"}], "@", 
                          RowBox[{"ReadList", "[", RowBox[{"stream", ",", 
                          " ", "Character", ",", " ", RowBox[{"minTok", "-", 
                          "1"}]}], "]"}]}]}]}], ",", "\n", "      ", RowBox[
                          {RowBox[{"tok", " ", "=", " ", RowBox[{"ReadList", 
                          "[", RowBox[{"stream", ",", " ", "Character", ",", 
                          " ", "minTok"}], "]"}]}], ";"}]}], "\n", "      ", 
                          "]"}], ";", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"AllTrue", "[", RowBox[{"tok", ",", 
                          " ", "StringQ"}], "]"}], ",", "\n", "      ", 
                          RowBox[{"tok", " ", "=", " ", RowBox[{"StringJoin", 
                          "[", "tok", "]"}]}], ",", "\n", "      ", RowBox[
                          {"Return", "[", RowBox[{"EndOfFile", ",", " ", 
                          "Module"}], "]"}]}], "\n", "      ", "]"}], ";", 
                         "\n", "    ", RowBox[{"While", "[", RowBox[
                          {RowBox[{"!", RowBox[{"KeyExistsQ", "[", RowBox[
                          {"tokSet", ",", " ", "tok"}], "]"}]}], ",", "\n", 
                          "      ", RowBox[{RowBox[{"tmp", " ", "=", " ", 
                          RowBox[{"Read", "[", RowBox[{"stream", ",", " ", 
                          "Character"}], "]"}]}], ";", "\n", "      ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"tmp", "===", 
                          "EndOfFile"}], ",", " ", RowBox[{"Return", "[", 
                          RowBox[{"EndOfFile", ",", " ", "Module"}], "]"}]}], 
                          "]"}], ";", "\n", "      ", RowBox[{"tok", " ", 
                          "=", " ", RowBox[{"tok", "<>", "tmp"}]}], ";"}]}], 
                          "\n", "      ", "]"}], ";", "\n", "    ", "\n", 
                         "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"StringMatchQ", "[", RowBox[{RowBox[{"StringTake", 
                          "[", RowBox[{"tok", ",", " ", RowBox[{"{", "1", 
                          "}"}]}], "]"}], ",", " ", "WordCharacter"}], "]"}], 
                          ",", "\n", "       ", RowBox[{"(*", " ", RowBox[
                          {"finally", " ", "need", " ", "to", " ", "check", 
                          " ", "that", " ", "next", " ", "char", " ", RowBox[
                          {"isn", "'"}], "t", " ", "another", " ", 
                          "WordCharacter"}], " ", "*)"}], "\n", "      ", 
                          RowBox[{RowBox[{"spos2", " ", "=", " ", RowBox[
                          {"StreamPosition", "[", "stream", "]"}]}], ";", 
                          "\n", "  ", "    ", RowBox[{"tmp", " ", "=", " ", 
                          RowBox[{"Read", "[", RowBox[{"stream", ",", " ", 
                          "Character"}], "]"}]}], ";", "\n", "      ", RowBox[
                          {"If", "[", RowBox[{RowBox[{RowBox[{"StringQ", "@", 
                          "tmp"}], "&&", RowBox[{"StringMatchQ", "[", RowBox[
                          {"tmp", ",", " ", "WordCharacter"}], "]"}]}], ",", 
                          "\n", "        ", RowBox[{RowBox[{
                          "SetStreamPosition", "[", RowBox[{"stream", ",", 
                          " ", "spos"}], "]"}], ";", "\n", "  ", "      ", 
                          RowBox[{"Return", "[", RowBox[{RowBox[{"{", RowBox[
                          {"$Failed", ",", " ", "tok"}], "}"}], ",", " ", 
                          "Module"}], "]"}]}], ",", "\n", "  ", "      ", 
                          RowBox[{"SetStreamPosition", "[", RowBox[{"stream", 
                          ",", " ", "spos2"}], "]"}]}], "\n", "        ", 
                          "]"}]}]}], "\n", "      ", "]"}], ";", "\n", 
                         "    ", "tok"}]}], "\n", "    ", "]"}]}]}], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]tokenRead\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"tokenRead", "[", RowBox[{"stream_", 
                        ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", 
                    "\n", "  ", RowBox[{RowBox[{"TokenStreamer", "[", 
                        RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], 
                        "]"}], "@", RowBox[{"\"Read\"", "[", "]"}]}]}], 
                  ";"}]], "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]tokenPeek\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"tokenPeek", "[", RowBox[{"stream_", 
                        ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", 
                    "\n", "  ", RowBox[{RowBox[{"TokenStreamer", "[", 
                        RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], 
                        "]"}], "@", RowBox[{"\"Peek\"", "[", "]"}]}]}], 
                  ";"}]], "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]tokenReadList\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell[CellGroupData[{Cell["\[LeftCeiling]old\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell["\[LeftCeiling]\n\tRealized this won\[CloseCurlyQuote]t \
work as the Handler gets applied too late...\n\[RightFloor]", "Text", 
                  Evaluatable -> True], Cell[BoxData[RowBox[{RowBox[
                      {RowBox[{"otokenReadList", "[", RowBox[{"stream_", ",", 
                          " ", "spec_", ",", " ", "n_"}], "]"}], ":=", "\n", 
                       "  ", RowBox[{"Module", "[", "\n", "    ", RowBox[
                          {RowBox[{"{", "\n", "      ", RowBox[{"body", ",", 
                          " ", "token", ",", " ", "final", ",", " ", 
                          "strPos", ",", "\n", "        ", RowBox[
                          {"handlers", "=", RowBox[{"spec", "[", 
                          "\"Handlers\"", "]"}]}], ",", " ", "\n", 
                          "        ", RowBox[{"seps", "=", RowBox[{"spec", 
                          "[", "\"Characters\"", "]"}]}], ",", "\n", 
                          "        ", "nullHandle", ",", " ", "read"}], "\n", 
                          "        ", "}"}], ",", "\n", "    ", RowBox[
                          {RowBox[{"body", " ", "=", " ", "\n", "      ", 
                          RowBox[{"ReadList", "[", RowBox[{"stream", ",", 
                          " ", "Record", ",", " ", "n", ",", "\n", 
                          "        ", RowBox[{"RecordSeparators", "\[Rule]", 
                          "seps"}]}], "\n", "        ", "]"}]}], ";", "\n", 
                          "    ", RowBox[{"body", " ", "=", " ", RowBox[
                          {"PadRight", "[", RowBox[{"body", ",", " ", "n", 
                          ",", " ", "EndOfFile"}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"final", " ", "=", " ", RowBox[
                          {"Read", "[", RowBox[{"stream", ",", " ", 
                          "Character"}], "]"}]}], ";", "\n", "    ", RowBox[
                          {"strPos", " ", "=", " ", RowBox[{"Pick", "[", 
                          RowBox[{RowBox[{"Range", "[", "n", "]"}], ",", " ", 
                          RowBox[{"StringQ", "/@", "body"}]}], "]"}]}], ";", 
                          "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {RowBox[{"Length", "@", "strPos"}], " ", "<", " ", 
                          "2"}], ",", "\n", "      ", RowBox[{RowBox[
                          {"nullHandle", " ", "=", " ", RowBox[{"Lookup", 
                          "[", RowBox[{"handlers", ",", " ", "EndOfFile", 
                          ",", " ", "LexerToken"}], "]"}]}], ";", "\n", 
                          "      ", RowBox[{"Return", "[", "\n", "        ", 
                          RowBox[{RowBox[{"Map", "[", "\n", "          ", 
                          RowBox[{RowBox[{RowBox[{"nullHandle", "[", "\n", 
                          "            ", RowBox[{"stream", ",", "\n", 
                          "            ", "#", ",", "\n", "            ", 
                          "EndOfFile"}], "\n", "            ", "]"}], "&"}], 
                          ",", "\n", "          ", "body"}], "\n", 
                          "          ", "]"}], ",", " ", "\n", "        ", 
                          "Module"}], "\n", "        ", "]"}]}]}], "\n", 
                          "      ", "]"}], ";", "\n", "    ", RowBox[
                          {"strPos", " ", "=", " ", RowBox[{"Rest", "@", 
                          "strPos"}]}], ";", "\n", "    ", RowBox[{"token", 
                          " ", "=", " ", RowBox[{"StringTake", "[", RowBox[
                          {RowBox[{"body", "[", RowBox[{"[", "strPos", "]"}], 
                          "]"}], ",", " ", "1"}], "]"}]}], ";", "\n", "    ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{RowBox[{"n", 
                          "-", RowBox[{"Max", "[", "strPos", "]"}]}], ">", 
                          "0"}], ",", "\n", "      ", RowBox[{"token", " ", 
                          "=", " ", RowBox[{"Join", "[", RowBox[{"token", 
                          ",", " ", RowBox[{"ConstantArray", "[", RowBox[
                          {"EndOfFile", ",", " ", RowBox[{"n", "-", RowBox[
                          {"Max", "[", "strPos", "]"}]}]}], "]"}]}], 
                          "]"}]}]}], "\n", "      ", "]"}], ";", "\n", 
                          "    ", RowBox[{"token", " ", "=", " ", RowBox[
                          {"Append", "[", RowBox[{"token", ",", " ", 
                          "final"}], "]"}]}], ";", "\n", "    ", RowBox[
                          {"MapThread", "[", "\n", "      ", RowBox[{RowBox[
                          {RowBox[{"#", "[", RowBox[{"stream", ",", " ", 
                          "#2", ",", " ", "#3"}], "]"}], "&"}], ",", "\n", 
                          "      ", RowBox[{"{", "\n", "        ", RowBox[
                          {RowBox[{"Lookup", "[", RowBox[{"handlers", ",", 
                          " ", "token", ",", " ", "LexerToken"}], "]"}], ",", 
                          "\n", "        ", "body", ",", "\n", "        ", 
                          "token"}], "\n", "        ", "}"}]}], "\n", 
                          "      ", "]"}]}]}], "\n", "    ", "]"}]}], ";"}]], 
                  "CodeInput"]}, Closed]], Cell[CellGroupData[
                {Cell["\[LeftCeiling]new\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[RowBox[{RowBox[{RowBox[{"tokenReadList", "[", 
                         RowBox[{"stream_", ",", " ", "spec_", ",", " ", 
                          "n_", ",", " ", "t_"}], "]"}], ":=", "\n", "  ", 
                       RowBox[{RowBox[{"TokenStreamer", "[", RowBox[
                          {"stream", ",", " ", "spec", ",", " ", "t"}], 
                          "]"}], "@", RowBox[{"\"Read\"", "[", "n", 
                          "]"}]}]}], ";"}]], "CodeInput"]}, Open]]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]tokenPeekList\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"tokenPeekList", "[", RowBox[
                       {"stream_", ",", " ", "spec_", ",", " ", "n_", ",", 
                        " ", "t_"}], "]"}], ":=", "\n", "  ", RowBox[
                     {RowBox[{"TokenStreamer", "[", RowBox[{"stream", ",", 
                          " ", "spec", ",", " ", "t"}], "]"}], "@", 
                      RowBox[{"\"Peek\"", "[", "n", "]"}]}]}], ";"}]], 
               "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]TokenRead\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]prepTokenHandlers\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"prepTokenHandler", "//", "Clear"}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"prepTokenHandler", "[", 
                       RowBox[{"{", RowBox[{"\"Stream\"", ",", " ", "char_", 
                          ",", " ", "escape___"}], "}"}], "]"}], ":=", 
                     RowBox[{"readString", "[", RowBox[{"char", ",", " ", 
                         "escape"}], "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"prepTokenHandler", "[", RowBox[{"{", 
                         RowBox[{"\"LookAhead\"", ",", " ", "dispatch_"}], 
                         "}"}], "]"}], ":=", RowBox[{"readLookAhead", "[", 
                       "dispatch", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"prepTokenHandler", "[", "e_", "]"}], 
                     ":=", "e"}], ";"}]}], "CodeInput"], Cell[BoxData[
                RowBox[{RowBox[{"prepTokenHandlers", "[", "tokens_", "]"}], 
                  ":=", "\n", "  ", RowBox[{"ReplacePart", "[", "\n", "    ", 
                    RowBox[{"tokens", ",", "\n", "    ", RowBox[
                       {"\"Handlers\"", "->", "\n", "      ", RowBox[{"Join", 
                          "[", "\n", "        ", RowBox[{RowBox[{"<|", "\n", 
                          "          ", RowBox[{"EndOfFile", "\[Rule]", 
                          "LexerToken"}], "\n", "          ", "|>"}], ",", 
                          "\n", "        ", RowBox[{"Map", "[", "\n", 
                          "          ", RowBox[{"prepTokenHandler", ",", 
                          "\n", "          ", RowBox[{"tokens", "[", 
                          "\"Handlers\"", "]"}]}], "\n", "          ", 
                          "]"}]}], "\n", "        ", "]"}]}]}], "\n", "    ", 
                    "]"}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TokenRead\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"TokenRead", "[", RowBox[
                       {"t_TokenStream", ",", " ", RowBox[{"n", ":", RowBox[
                          {"_Integer", "?", "Positive"}], ":", "1"}]}], 
                      "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", 
                      RowBox[{RowBox[{"{", RowBox[{RowBox[{"stream", "=", 
                          RowBox[{"t", "[", "\"Stream\"", "]"}]}], ",", " ", 
                          RowBox[{"spec", "=", RowBox[{"prepTokenHandlers", 
                          "@", RowBox[{"t", "[", "\"Tokens\"", "]"}]}]}]}], 
                          "}"}], ",", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"n", ">", "1"}], ",", " ", "\n", 
                          "        ", RowBox[{"tokenReadList", "[", RowBox[
                          {"stream", ",", " ", "spec", ",", " ", "n", ",", 
                          " ", "t"}], "]"}], ",", "\n", "        ", RowBox[
                          {"tokenRead", "[", RowBox[{"stream", ",", " ", 
                          "spec", ",", " ", "t"}], "]"}]}], "\n", "        ", 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]TokenRead\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"TokenPeek", "[", RowBox[
                       {"t_TokenStream", ",", " ", RowBox[{"n", ":", RowBox[
                          {"_Integer", "?", "Positive"}], ":", "1"}]}], 
                      "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", 
                      RowBox[{RowBox[{"{", RowBox[{RowBox[{"stream", "=", 
                          RowBox[{"t", "[", "\"Stream\"", "]"}]}], ",", " ", 
                          RowBox[{"spec", "=", RowBox[{"prepTokenHandlers", 
                          "@", RowBox[{"t", "[", "\"Tokens\"", "]"}]}]}]}], 
                          "}"}], ",", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"n", ">", "1"}], ",", " ", "\n", 
                          "      ", RowBox[{"tokenPeekList", "[", RowBox[
                          {"stream", ",", " ", "spec", ",", " ", "n", ",", 
                          " ", "t"}], "]"}], ",", "\n", "      ", RowBox[
                          {"tokenPeek", "[", RowBox[{"stream", ",", " ", 
                          "spec", ",", " ", "t"}], "]"}]}], "\n", "      ", 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}]], 
               "CodeInput"]}, Open]]}, Open]]}, Open]], 
     Cell[BoxData[RowBox[{RowBox[{"End", "[", "]"}], ";"}]], 
      "InputSection"]}, Open]], Cell["", "SectionSeparator"]}, 
 FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
 StyleDefinitions -> FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
   CharacterEncoding -> "UTF-8"]]
