Notebook[{Cell[CellGroupData[{Cell["\[LeftCeiling]Tokens\[RightFloor]", 
      "CodeSection", Evaluatable -> True], 
     Cell[BoxData[RowBox[{RowBox[{RowBox[{"TokenStream", "::", "usage"}], 
           "=", "\"An object representing a stream of tokens\""}], ";"}]], 
      "CodeInput"], Cell[BoxData[
       {RowBox[{RowBox[{RowBox[{"SetTokenizerCheckpoint", "::", "usage"}], 
            "=", "\"Sets the Tokenizer checkpoint\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"ResetTokenizerCheckpoint", "::", "usage"}], 
            "=", "\"Reverts the Tokenizer checkpoint\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"WithTokenizerCheckpoint", "::", "usage"}], 
            "=", "\"Wrapper for tokenizing\""}], ";"}]}], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TokenRead", "::", "usage"}], "=", 
            "\"Pulls n tokens out of a TokenStream\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TokenStreamer", "::", "usage"}], "=", 
            "\"Lower-level object for faster token streaming\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[RowBox[
        {RowBox[{"Begin", "[", "\"`Private`\"", "]"}], ";"}]], 
      "InputSection"], Cell[CellGroupData[
       {Cell["\[LeftCeiling]TokenStream\[RightFloor]", "CodeSubsection", 
         Evaluatable -> True], Cell[BoxData[RowBox[{"RegisterInterface", "[", 
            "\n", "  ", RowBox[{"TokenStream", ",", "\n", "  ", 
              RowBox[{"{", "\n", "    ", RowBox[{"\"Tokens\"", ",", "\n", 
                  "    ", "\"Stream\""}], "\n", "    ", "}"}], ",", "\n", 
              "  ", RowBox[{"\"Constructor\"", "\[Rule]", 
                "buildTokenStream"}]}], "\n", "  ", "]"}]], "CodeInput"], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]buildTokenStream\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"buildTokenStream", "[", 
                    RowBox[{"l_LexerObject", ",", " ", "i_InputStream"}], 
                    "]"}], ":=", "\n", "  ", RowBox[{"<|", RowBox[
                     {RowBox[{"\"Tokens\"", "\[Rule]", RowBox[{"l", "[", 
                          "\"Tokens\"", "]"}]}], ",", " ", RowBox[
                       {"\"Stream\"", "\[Rule]", "i"}]}], "|>"}]}], ";"}], 
              "\n", RowBox[{RowBox[{RowBox[{"buildTokenStream", "[", 
                    RowBox[{"l_LexerObject", ",", " ", RowBox[{"s_String", 
                        "?", RowBox[{"(", RowBox[{"Not", "@*", 
                          "FileExistsQ"}], ")"}]}]}], "]"}], ":=", "\n", 
                  "  ", RowBox[{"buildTokenStream", "[", RowBox[{"l", ",", 
                      " ", RowBox[{"StringToStream", "[", "s", "]"}]}], 
                    "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"buildTokenStream", "[", RowBox[{"l_LexerObject", 
                      ",", " ", RowBox[{"s_String", "?", RowBox[{"(", 
                          "FileExistsQ", ")"}]}]}], "]"}], ":=", "\n", " ", 
                  RowBox[{"buildTokenStream", "[", RowBox[{"l", ",", " ", 
                      RowBox[{"OpenRead", "[", "s", "]"}]}], "]"}]}], 
                ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Methods\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{RowBox[{"InterfaceMethod", 
                      "[", "TokenStream", "]"}], "@", "\n", "  ", RowBox[
                     {RowBox[{"t_TokenStream", "[", "\"Read\"", "]"}], "[", 
                      RowBox[{"n", ":", RowBox[{"_Integer", "?", 
                          "Positive"}], ":", "1"}], "]"}]}], ":=", "\n", 
                  "    ", RowBox[{"TokenRead", "[", RowBox[{"t", ",", " ", 
                      "n"}], "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{RowBox[{"InterfaceMethod", "[", "TokenStream", 
                      "]"}], "@", "\n", "  ", RowBox[{RowBox[
                       {"t_TokenStream", "[", "\"Streamer\"", "]"}], "[", 
                      "]"}]}], ":=", "\n", "    ", RowBox[{"TokenStreamer", 
                    "[", "t", "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{RowBox[{"InterfaceMethod", "[", "TokenStream", 
                      "]"}], "@", "\n", "  ", RowBox[{RowBox[
                       {"t_TokenStream", "[", "\"Close\"", "]"}], "[", 
                      "]"}]}], ":=", "\n", "    ", RowBox[{"Close", "@", 
                    RowBox[{"t", "[", "\"Stream\"", "]"}]}]}], ";"}]}], 
            "CodeInput"]}, Open]]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]TokenRead\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]$checkpoints\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tMight be better to do with Language`ExpressionStore \
?\n\tWe\[CloseCurlyQuote]re gonna manage this under the assumption that if \
you peek ahead and then reset you want to be able to jump back to where you \
were post peek...?\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"If", "[", RowBox[{RowBox[
                     {"!", RowBox[{"AssociationQ", "[", "$checkpoints", 
                        "]"}]}], ",", " ", RowBox[{"$checkpoints", "=", 
                      RowBox[{"<|", "|>"}]}]}], "]"}], ";"}], "\n", 
              RowBox[{RowBox[{"If", "[", RowBox[{RowBox[{"!", RowBox[
                       {"AssociationQ", "[", "$peekpoints", "]"}]}], ",", 
                    " ", RowBox[{"$peekpoints", "=", RowBox[{"<|", 
                        "|>"}]}]}], "]"}], ";"}]}], "CodeInput"], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"SetTokenizerCheckpoint", 
                    "[", RowBox[{"stream_InputStream", ",", " ", RowBox[
                       {"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "]"}], 
                  ":=", "\n", "  ", RowBox[{"If", "[", RowBox[
                     {RowBox[{"dir", "===", "\"Backward\""}], ",", "\n", 
                      "    ", RowBox[{RowBox[{"$checkpoints", "[", "stream", 
                          "]"}], " ", "=", " ", RowBox[{"StreamPosition", 
                          "[", "stream", "]"}]}], ",", "\n", "    ", 
                      RowBox[{RowBox[{"$peekpoints", "[", "stream", "]"}], 
                        " ", "=", " ", RowBox[{"StreamPosition", "[", 
                          "stream", "]"}]}]}], "\n", "    ", "]"}]}], ";"}], 
              "\n", RowBox[{RowBox[{RowBox[{"SetTokenizerCheckpoint", "[", 
                    "\n", "  ", RowBox[{RowBox[{"TokenStreamer", "[", 
                        RowBox[{"{", RowBox[{"t_", ",", " ", "stream_", ",", 
                          " ", "handlers_", ",", " ", "seps_", ",", " ", 
                          "tokPuller_"}], "}"}], "]"}], ",", " ", "\n", "  ", 
                      RowBox[{"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "\n", 
                    "  ", "]"}], ":=", "\n", "  ", RowBox[
                   {"SetTokenizerCheckpoint", "[", RowBox[{"stream", ",", 
                      " ", "dir"}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"SetTokenizerCheckpoint", "[", "\n", 
                    "  ", RowBox[{"t_TokenStream", ",", " ", "\n", "  ", 
                      RowBox[{"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "\n", 
                    "  ", "]"}], ":=", "\n", "  ", RowBox[
                   {"SetTokenizerCheckpoint", "[", RowBox[{RowBox[{"t", "[", 
                        "\"Stream\"", "]"}], ",", " ", "dir"}], "]"}]}], 
                ";"}]}], "CodeInput"], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"ResetTokenizerCheckpoint", "[", 
                    RowBox[{"stream_InputStream", ",", " ", RowBox[{"dir", 
                        ":", RowBox[{"\"Forward\"", "|", "\"Backward\""}], 
                        ":", "\"Backward\""}]}], "]"}], ":=", "\n", "  ", 
                  RowBox[{"SetStreamPosition", "[", RowBox[{"stream", ",", 
                      " ", "\n", "    ", RowBox[{RowBox[{"If", "[", RowBox[
                          {RowBox[{"dir", "===", "\"Backward\""}], ",", "\n", 
                          "      ", "$checkpoints", ",", "\n", "      ", 
                          "$peekpoints"}], "\n", "      ", "]"}], "[", 
                        "stream", "]"}]}], "\n", "    ", "]"}]}], ";"}], 
              "\n", RowBox[{RowBox[{RowBox[{"ResetTokenizerCheckpoint", "[", 
                    "\n", "  ", RowBox[{RowBox[{"TokenStreamer", "[", 
                        RowBox[{"{", RowBox[{"t_", ",", " ", "stream_", ",", 
                          " ", "handlers_", ",", " ", "seps_", ",", " ", 
                          "tokPuller_"}], "}"}], "]"}], ",", " ", "\n", "  ", 
                      RowBox[{"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "\n", 
                    "  ", "]"}], ":=", "\n", "  ", RowBox[
                   {"ResetTokenizerCheckpoint", "[", RowBox[{"stream", ",", 
                      " ", "dir"}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"ResetTokenizerCheckpoint", "[", "\n", 
                    "  ", RowBox[{"t_TokenStream", ",", " ", "\n", "  ", 
                      RowBox[{"dir", ":", RowBox[{"\"Forward\"", "|", 
                          "\"Backward\""}], ":", "\"Backward\""}]}], "\n", 
                    "  ", "]"}], ":=", "\n", "  ", RowBox[
                   {"ResetTokenizerCheckpoint", "[", RowBox[{RowBox[
                       {"t", "[", "\"Stream\"", "]"}], ",", " ", "dir"}], 
                    "]"}]}], ";"}]}], "CodeInput"], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WithTokenizerCheckpoint", 
                    "[", RowBox[{"stream_InputStream", ",", " ", "expr_"}], 
                    "]"}], ":=", "\n", "  ", RowBox[{"Block", "[", "\n", 
                    "    ", RowBox[{RowBox[{"{", "\n", "      ", RowBox[
                         {RowBox[{"$checkpoints", " ", "=", " ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"!", RowBox[
                          {"AssociationQ", "[", "$checkpoints", "]"}]}], ",", 
                          " ", RowBox[{"<|", "|>"}], ",", " ", 
                          "$checkpoints"}], "]"}]}], ",", "\n", "      ", 
                          RowBox[{"$peekpoints", " ", "=", " ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"!", RowBox[
                          {"AssociationQ", "[", "$peekpoints", "]"}]}], ",", 
                          " ", RowBox[{"<|", "|>"}], ",", " ", 
                          "$peekpoints"}], "]"}]}]}], "\n", "      ", "}"}], 
                      ",", "\n", "    ", RowBox[{RowBox[
                         {"SetTokenizerCheckpoint", "[", "stream", "]"}], 
                        ";", "\n", "    ", "expr"}]}], "\n", "    ", "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[
                   {"WithTokenizerCheckpoint", "[", "\n", "  ", RowBox[
                     {RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                          {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                          ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                        "]"}], ",", " ", "\n", "  ", "expr_"}], "\n", "  ", 
                    "]"}], ":=", "\n", "  ", RowBox[
                   {"WithTokenizerCheckpoint", "[", RowBox[{"stream", ",", 
                      " ", "expr"}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"WithTokenizerCheckpoint", "[", "\n", 
                    "  ", RowBox[{"t_TokenStream", ",", " ", "\n", "  ", 
                      "expr_"}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                  RowBox[{"WithTokenizerCheckpoint", "[", RowBox[
                     {RowBox[{"t", "[", "\"Stream\"", "]"}], ",", " ", 
                      "expr"}], "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {"WithTokenizerCheckpoint", "~", "SetAttributes", "~", 
                  "HoldRest"}], ";"}]}], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]readStringToken\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"readStringToken", "//", "Clear"}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"readStringToken", "[", 
                    RowBox[{"tok_", ",", " ", "end_", ",", " ", RowBox[
                       {"escape_:", "\"\\\\\""}]}], "]"}], "[", RowBox[
                   {"stream_", ",", " ", "body_", ",", " ", "token_"}], 
                  "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", "\n", 
                  "    ", RowBox[{RowBox[{"{", "\n", "      ", RowBox[
                       {RowBox[{"sm", " ", "=", " ", RowBox[{"Replace", "[", 
                          RowBox[{"stream", ",", " ", RowBox[{"{", RowBox[
                          {RowBox[{RowBox[{"TokenStreamer", "[", RowBox[{"{", 
                          RowBox[{"_", ",", " ", "s_", ",", " ", "___"}], 
                          "}"}], "]"}], "\[RuleDelayed]", "s"}], ",", " ", 
                          RowBox[{"t_TokenStream", "\[RuleDelayed]", RowBox[
                          {"t", "[", "\"Stream\"", "]"}]}]}], "}"}]}], 
                          "]"}]}], ",", "\n", "      ", "tmp", ",", "\n", 
                        "      ", "str", ",", "\n", "      ", RowBox[{"escs", 
                          " ", "=", " ", RowBox[{"Alternatives", "@@", 
                          RowBox[{"Flatten", "[", RowBox[{"{", "escape", 
                          "}"}], "]"}]}]}]}], "\n", "      ", "}"}], ",", 
                    "\n", "    ", RowBox[{RowBox[{"str", " ", "=", " ", 
                        RowBox[{"Read", "[", RowBox[{"sm", ",", " ", 
                          "Record", ",", " ", RowBox[{"RecordSeparators", 
                          "\[Rule]", RowBox[{"{", "end", "}"}]}], ",", " ", 
                          RowBox[{"NullRecords", "\[Rule]", "True"}]}], 
                          "]"}]}], ";", "\n", "    ", RowBox[{"While", "[", 
                        RowBox[{RowBox[{RowBox[{"StringQ", "[", "str", "]"}], 
                          "&&", RowBox[{"StringEndsQ", "[", RowBox[{"str", 
                          ",", " ", "escs"}], "]"}]}], ",", "\n", "      ", 
                          RowBox[{RowBox[{"tmp", " ", "=", " ", RowBox[
                          {"Read", "[", RowBox[{"sm", ",", " ", "Record", 
                          ",", " ", RowBox[{"RecordSeparators", "\[Rule]", 
                          RowBox[{"{", "end", "}"}]}], ",", " ", RowBox[
                          {"NullRecords", "\[Rule]", "True"}]}], "]"}]}], 
                          ";", "\n", "      ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"tmp", "===", "EndOfFile"}], ",", " ", 
                          RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\n", 
                          "      ", RowBox[{"str", " ", "=", " ", RowBox[
                          {"str", "<>", "tok", "<>", "tmp"}]}], ";"}]}], 
                        "\n", "      ", "]"}], ";", "\n", "    ", RowBox[
                       {"LexerToken", "[", RowBox[{"stream", ",", " ", 
                          RowBox[{"{", RowBox[{"body", ",", " ", RowBox[
                          {"tok", "<>", "str", "<>", "end"}]}], "}"}], ",", 
                          " ", "tok"}], "]"}]}]}], "\n", "    ", "]"}]}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]readLookAhead\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"readLookAhead", "[", 
                    "lookAheadDispatcher_", "]"}], ":=", "\n", "  ", 
                  RowBox[{"readLookAhead", "[", RowBox[
                     {"lookAheadDispatcher", ",", " ", RowBox[{"tokenPuller", 
                        "[", RowBox[{"Keys", "[", "lookAheadDispatcher", 
                          "]"}], "]"}]}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"readLookAhead", "[", RowBox[
                     {"lookAheadDispatcher_", ",", " ", "tokenPuller_"}], 
                    "]"}], "[", RowBox[{"stream_", ",", " ", "body_", ",", 
                    " ", "token_"}], "]"}], ":=", "\n", "  ", RowBox[
                 {RowBox[{"lookAheadDispatcher", "[", RowBox[{"tokenPuller", 
                      "[", "stream", "]"}], "]"}], "[", RowBox[{"stream", 
                    ",", " ", "body", ",", " ", "token"}], "]"}]}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]TokenStreamer\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tDesigned to be as minimal overhead as can still be \
convenient\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TokenStreamer\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"TokenStreamer", "[", 
                       "t_TokenStream", "]"}], ":=", "\n", "  ", RowBox[
                      {"Module", "[", RowBox[{RowBox[{"{", RowBox[{RowBox[
                          {"stream", "=", RowBox[{"t", "[", "\"Stream\"", 
                          "]"}]}], ",", " ", RowBox[{"spec", "=", RowBox[
                          {"prepTokenHandlers", "@", RowBox[{"t", "[", 
                          "\"Tokens\"", "]"}]}]}]}], "}"}], ",", "\n", 
                         "    ", RowBox[{"TokenStreamer", "[", RowBox[
                          {"stream", ",", " ", "spec", ",", " ", "t"}], 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TokenStreamer", "[", RowBox[
                        {"stream_", ",", " ", "spec_", ",", " ", "t_"}], 
                       "]"}], ":=", "\n", "  ", RowBox[{"TokenStreamer", "[", 
                       RowBox[{"{", "\n", "    ", RowBox[{"t", ",", "\n", 
                          "    ", "stream", ",", "\n", "    ", RowBox[
                          {"spec", "[", "\"Handlers\"", "]"}], ",", " ", 
                          "\n", "    ", RowBox[{"spec", "[", 
                          "\"Characters\"", "]"}], ",", "\n", "    ", RowBox[
                          {"tokenPuller", "[", RowBox[{"spec", "[", 
                          "\"Characters\"", "]"}], "]"}]}], "\n", "    ", 
                         "}"}], "]"}]}], ";"}]}], "CodeInput"], 
              Cell[BoxData[{RowBox[{RowBox[{RowBox[{RowBox[{"(", "\n", "\t", 
                         RowBox[{"tks", ":", RowBox[{"HoldPattern", "[", 
                          RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                          {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                          ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                          "]"}], "]"}]}], "\n", "\t", ")"}], "@", RowBox[
                        {"\"Read\"", "[", "n_", "]"}]}], ":=", "\n", "  ", 
                     RowBox[{"WithTokenizerCheckpoint", "[", "\n", "    ", 
                       RowBox[{"stream", ",", "\n", "    ", RowBox[
                          {"TokenStreamerRead", "[", RowBox[{"tks", ",", " ", 
                          "n"}], "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{" ", RowBox[{RowBox[{RowBox[{RowBox[{"(", "\n", 
                          "\t", RowBox[{"tks", ":", RowBox[{"HoldPattern", 
                          "[", RowBox[{"TokenStreamer", "[", RowBox[{"{", 
                          RowBox[{"t_", ",", " ", "stream_", ",", " ", 
                          "handlers_", ",", " ", "seps_", ",", " ", 
                          "tokPuller_"}], "}"}], "]"}], "]"}]}], "\n", "\t", 
                          ")"}], "@", RowBox[{"\"Read\"", "[", "]"}]}], ":=", 
                       "\n", "   ", RowBox[{RowBox[{"(", RowBox[{"tks", "@", 
                          RowBox[{"\"Read\"", "[", "1", "]"}]}], ")"}], "[", 
                         RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}], "\n", 
                 RowBox[{" ", RowBox[{RowBox[{RowBox[{RowBox[{"(", "\n", 
                          "\t", RowBox[{"tks", ":", RowBox[{"HoldPattern", 
                          "[", RowBox[{"TokenStreamer", "[", RowBox[{"{", 
                          RowBox[{"t_", ",", " ", "stream_", ",", " ", 
                          "handlers_", ",", " ", "seps_", ",", " ", 
                          "tokPuller_"}], "}"}], "]"}], "]"}]}], "\n", "\t", 
                          ")"}], "@", RowBox[{"\"Peek\"", "[", "n_", "]"}]}], 
                       ":=", "\n", "   ", RowBox[{"WithTokenizerCheckpoint", 
                         "[", "\n", "     ", RowBox[{"stream", ",", "\n", 
                          "     ", RowBox[{RowBox[{RowBox[{"(", RowBox[
                          {RowBox[{"ResetTokenizerCheckpoint", "[", "stream", 
                          "]"}], ";", " ", "#"}], ")"}], "&"}], "@", RowBox[
                          {"TokenStreamerRead", "[", RowBox[{"tks", ",", " ", 
                          "n"}], "]"}]}]}], "\n", "     ", "]"}]}], ";"}]}], 
                 "\n", RowBox[{" ", RowBox[{RowBox[{RowBox[{RowBox[{"(", 
                          "\n", "\t", RowBox[{"tks", ":", RowBox[
                          {"HoldPattern", "[", RowBox[{"TokenStreamer", "[", 
                          RowBox[{"{", RowBox[{"t_", ",", " ", "stream_", 
                          ",", " ", "handlers_", ",", " ", "seps_", ",", " ", 
                          "tokPuller_"}], "}"}], "]"}], "]"}]}], "\n", "\t", 
                          ")"}], "@", RowBox[{"\"Peek\"", "[", "]"}]}], ":=", 
                       "\n", "   ", RowBox[{RowBox[{"(", RowBox[{"tks", "@", 
                          RowBox[{"\"Peek\"", "[", "1", "]"}]}], ")"}], "[", 
                         RowBox[{"[", "1", "]"}], "]"}]}], ";"}]}]}], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]readRecord\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"If", "[", RowBox[{RowBox[{"!", RowBox[
                         {"MatchQ", "[", RowBox[{"$unfortunatelyNecessary", 
                          ",", " ", "_Language`ExpressionStore"}], "]"}]}], 
                      ",", "\n", "  ", RowBox[{RowBox[
                         {"$unfortunatelyNecessary", "=", RowBox[
                          {"Language`NewExpressionStore", "[", 
                          "\"<StreamBugBits>\"", "]"}]}], ";"}]}], "\n", 
                    "  ", "]"}], ";"}]], "CodeInput"], Cell[BoxData[
                RowBox[{RowBox[{"alreadyReadOnce", "[", RowBox[{"stream_", 
                      ",", " ", "seps_"}], "]"}], ":=", "\n", "  ", 
                  RowBox[{"TrueQ", "[", RowBox[{"$unfortunatelyNecessary", 
                      "@", RowBox[{"\"get\"", "[", RowBox[{"stream", ",", 
                          " ", "seps"}], "]"}]}], "]"}]}]], "CodeInput"], 
              Cell[BoxData[{RowBox[{RowBox[{RowBox[{"readRecordReal", "[", 
                       RowBox[{"stream_", ",", " ", "seps_"}], "]"}], ":=", 
                     "\n", "  ", RowBox[{"Read", "[", RowBox[{"stream", ",", 
                         " ", "\n", "    ", "Record", ",", "\n", "    ", 
                         RowBox[{"RecordSeparators", "\[Rule]", "seps"}], 
                         ",", "\n", "    ", RowBox[{"NullRecords", "\[Rule]", 
                          "True"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"readRecord", "[", RowBox[
                        {"stream_", ",", " ", "seps_", ",", " ", "sp_"}], 
                       "]"}], ":=", "\n", "  ", RowBox[{"(*", " ", "\n", 
                       "        ", RowBox[{RowBox[{"this", " ", "works", " ", 
                          "around", " ", "a", " ", "bug", " ", "in", " ", 
                          "InputStream", " ", "where", " ", "the", " ", 
                          "stream", " ", "\n", "          ", "can", " ", 
                          "advance", " ", "internally"}], ",", " ", RowBox[
                          {"but", " ", "the", " ", "StreamPosition", " ", 
                          RowBox[{"doesn", "'"}], "t"}]}], " ", "\n", 
                       "        ", "*)"}], "\n", "  ", RowBox[{"If", "[", 
                       RowBox[{RowBox[{"sp", "\[Equal]", "0"}], ",", "\n", 
                         "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"alreadyReadOnce", "[", RowBox[{"stream", ",", 
                          " ", "seps"}], "]"}], ",", "\n", "      ", RowBox[
                          {RowBox[{"SetStreamPosition", "[", RowBox[
                          {"stream", ",", " ", "0"}], "]"}], ";", "\n", 
                          "      ", RowBox[{"readRecordReal", "[", RowBox[
                          {"stream", ",", " ", "seps"}], "]"}], ";", "\n", 
                          "      ", RowBox[{"readRecordReal", "[", RowBox[
                          {"stream", ",", " ", "seps"}], "]"}]}], ",", "\n", 
                          "      ", RowBox[{RowBox[{
                          "$unfortunatelyNecessary", "@", RowBox[{"\"put\"", 
                          "[", RowBox[{"stream", ",", " ", "seps", ",", " ", 
                          "True"}], "]"}]}], ";", "\n", "      ", RowBox[
                          {"readRecordReal", "[", RowBox[{"stream", ",", " ", 
                          "seps"}], "]"}]}]}], "\n", "      ", "]"}], ",", 
                         "\n", "    ", RowBox[{"readRecordReal", "[", RowBox[
                          {"stream", ",", " ", "seps"}], "]"}]}], "\n", 
                       "    ", "]"}]}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TokenStreamerRead\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"TokenStreamerRead", "[", RowBox[
                     {RowBox[{"TokenStreamer", "[", RowBox[{"{", RowBox[
                          {"t_", ",", " ", "stream_", ",", " ", "handlers_", 
                          ",", " ", "seps_", ",", " ", "tokPuller_"}], "}"}], 
                        "]"}], ",", " ", "n_"}], "]"}], ":=", "\n", "  ", 
                  RowBox[{"Module", "[", RowBox[{RowBox[{"{", RowBox[{"body", 
                          ",", " ", "tmp", ",", " ", "token", ",", " ", 
                          "spos", ",", " ", "sp"}], "}"}], ",", "\n", "    ", 
                      RowBox[{"Table", "[", "\n", "      ", RowBox[
                         {RowBox[{RowBox[{"token", " ", "=", " ", 
                          "$Failed"}], ";", "\n", "      ", RowBox[{"body", 
                          " ", "=", " ", "EndOfFile"}], ";", "\n", "      ", 
                          RowBox[{"Block", "[", RowBox[{RowBox[{"{", "}"}], 
                          ",", " ", RowBox[{"(*", " ", RowBox[{"just", " ", 
                          "building", " ", "a", " ", "Return", " ", 
                          "point"}], " ", "*)"}], "\n", "        ", RowBox[
                          {RowBox[{"sp", " ", "=", " ", RowBox[
                          {"StreamPosition", "[", "stream", "]"}]}], ";", 
                          "\n", "        ", RowBox[{"While", "[", RowBox[
                          {RowBox[{"token", "===", "$Failed"}], ",", "\n", 
                          "          ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"sp", "==", "0"}], ",", "\n", "            ", 
                          RowBox[{"(*", " ", "\n", 
                          "                            ", RowBox[{"we", " ", 
                          "need", " ", "a", " ", "secondary", " ", 
                          "handling", " ", "mechanism", " ", "to", " ", 
                          "ensure", "\n", "  ", "  ", "  ", "  ", 
                          "                      ", "that", " ", "we", " ", 
                          RowBox[{"don", "'"}], "t", " ", "miss", " ", 
                          "tokens", " ", "at", " ", "the", " ", "very", " ", 
                          "start", " ", "of", " ", "the", " ", "stream"}], 
                          "\n", "  ", "  ", "  ", "  ", 
                          "                    ", "*)"}], "\n", 
                          "            ", RowBox[{RowBox[{"tmp", " ", "=", 
                          " ", "\n", "             ", RowBox[{"readRecord", 
                          "[", RowBox[{"stream", ",", " ", "seps", ",", " ", 
                          "sp"}], "]"}]}], ";", "\n", "            ", RowBox[
                          {"(*", " ", RowBox[{"if", " ", RowBox[{"we", "'"}], 
                          "re", " ", "at", " ", "the", " ", "end", " ", "of", 
                          " ", "the", " ", "stream", " ", "just", " ", 
                          "bail"}], " ", "*)"}], "\n", "  ", "          ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"tmp", "===", 
                          "EndOfFile"}], ",", "\n", "  ", "            ", 
                          RowBox[{"Return", "[", "\n", "  ", 
                          "              ", RowBox[{RowBox[{RowBox[{
                          "handlers", "[", "EndOfFile", "]"}], "[", "\n", 
                          "  ", "                ", RowBox[{"t", ",", "\n", 
                          "  ", "                ", "EndOfFile", ",", "\n", 
                          "  ", "                ", "EndOfFile"}], "\n", 
                          "  ", "                ", "]"}], ",", "\n", 
                          "                ", "Block"}], "\n", 
                          "                ", "]"}]}], "\n", 
                          "              ", "]"}], ";", "\n", "            ", 
                          RowBox[{"spos", " ", "=", " ", RowBox[{
                          "StreamPosition", "[", "stream", "]"}]}], ";", 
                          "\n", "            ", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{RowBox[{"StringLength", "@", 
                          "tmp"}], "<", "spos"}], "&&", RowBox[{"!", RowBox[
                          {"alreadyReadOnce", "[", RowBox[{"stream", ",", 
                          " ", "seps"}], "]"}]}]}], RowBox[{"(*", " ", RowBox[
                          {"we", " ", "skipped", " ", "too", " ", "far"}], 
                          " ", "*)"}], ",", "\n", "              ", RowBox[
                          {RowBox[{"SetStreamPosition", "[", RowBox[{
                          "stream", ",", " ", "0"}], "]"}], ";", "\n", 
                          "              ", RowBox[{"token", " ", "=", " ", 
                          RowBox[{"tokPuller", "[", "stream", "]"}]}], ";", 
                          "\n", "  ", "            ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"ListQ", "@", "token"}], ",", " ", 
                          "\n", "  ", "              ", RowBox[{RowBox[
                          {"body", " ", "=", " ", RowBox[{"token", "[", 
                          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\n", "  ", 
                          "  ", "            ", RowBox[{"token", " ", "=", 
                          " ", RowBox[{"token", "[", RowBox[{"[", "1", "]"}], 
                          "]"}]}]}], ",", "\n", "  ", "              ", 
                          RowBox[{RowBox[{"body", " ", "=", " ", "\"\""}], 
                          ";"}]}], "\n", "                ", "]"}]}], ",", 
                          "\n", "              ", RowBox[{RowBox[{"token", 
                          " ", "=", " ", RowBox[{"tokPuller", "[", "stream", 
                          "]"}]}], ";", "\n", "              ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"ListQ", "@", "token"}], ",", 
                          " ", "\n", "  ", "  ", "            ", RowBox[
                          {RowBox[{"tmp", " ", "=", " ", RowBox[{"tmp", " ", 
                          "<>", " ", RowBox[{"token", "[", RowBox[{"[", "2", 
                          "]"}], "]"}]}]}], ";", "\n", "  ", "  ", 
                          "            ", RowBox[{"token", " ", "=", " ", 
                          RowBox[{"token", "[", RowBox[{"[", "1", "]"}], 
                          "]"}]}], ";"}]}], "\n", "                ", "]"}], 
                          ";", "\n", "              ", RowBox[{"body", " ", 
                          "=", " ", RowBox[{"If", "[", RowBox[{RowBox[{
                          "StringQ", "@", "body"}], ",", " ", RowBox[{"body", 
                          "<>", "tmp"}], ",", " ", "tmp"}], "]"}]}]}]}], 
                          "\n", "              ", "]"}]}], ",", "\n", 
                          "            ", RowBox[{"(*", " ", RowBox[
                          {"standard", " ", "mechanism", " ", "a", " ", 
                          "little", " ", "bit", " ", "simpler"}], " ", 
                          "*)"}], "\n", "            ", RowBox[{RowBox[
                          {"tmp", " ", "=", " ", RowBox[{"readRecord", "[", 
                          RowBox[{"stream", ",", " ", "seps", ",", " ", 
                          "sp"}], "]"}]}], ";", "\n", "            ", RowBox[
                          {"(*", " ", RowBox[{RowBox[{"if", " ", RowBox[
                          {"we", "'"}], "re", " ", "at", " ", "the", " ", 
                          "end", " ", "of", " ", "the", " ", "stream"}], ",", 
                          " ", "again", ",", " ", RowBox[{"just", " ", 
                          "bail"}]}], " ", "*)"}], "\n", "            ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"tmp", "===", 
                          "EndOfFile"}], ",", " ", "\n", "  ", "  ", "  ", 
                          "  ", "      ", RowBox[{"Return", "[", "\n", "  ", 
                          "  ", "  ", "  ", "        ", RowBox[{RowBox[
                          {RowBox[{"handlers", "[", "EndOfFile", "]"}], "[", 
                          "\n", "  ", "  ", "  ", "  ", "          ", RowBox[
                          {"t", ",", "\n", "  ", "  ", "  ", "  ", 
                          "          ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"StringQ", "@", "body"}], ",", " ", "body", ",", 
                          " ", "EndOfFile"}], "]"}], ",", "\n", "  ", "  ", 
                          "  ", "  ", "          ", "EndOfFile"}], "\n", 
                          "  ", "  ", "  ", "  ", "          ", "]"}], ",", 
                          "\n", "                ", "Block"}], "\n", 
                          "                ", "]"}], ",", "\n", 
                          "              ", RowBox[{RowBox[{"token", " ", 
                          "=", " ", RowBox[{"tokPuller", "[", "stream", 
                          "]"}]}], ";", "\n", "              ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"ListQ", "@", "token"}], ",", 
                          " ", "\n", "  ", "  ", "            ", RowBox[
                          {RowBox[{"tmp", " ", "=", " ", RowBox[{"tmp", " ", 
                          "<>", " ", RowBox[{"token", "[", RowBox[{"[", "2", 
                          "]"}], "]"}]}]}], ";", "\n", "  ", "  ", 
                          "            ", RowBox[{"token", " ", "=", " ", 
                          RowBox[{"token", "[", RowBox[{"[", "1", "]"}], 
                          "]"}]}], ";"}]}], "\n", "  ", "  ", "            ", 
                          "]"}]}]}], "\n", "  ", "  ", "          ", "]"}], 
                          ";", "\n", "  ", "  ", "        ", RowBox[{"body", 
                          " ", "=", " ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"StringQ", "@", "body"}], ",", " ", RowBox[
                          {"body", "<>", "tmp"}], ",", " ", "tmp"}], 
                          "]"}]}]}]}], "\n", "  ", "          ", "]"}]}], 
                          "\n", "  ", "        ", "]"}], ";", "\n", "  ", 
                          "      ", RowBox[{RowBox[{"handlers", "[", "token", 
                          "]"}], "[", "\n", "  ", "        ", RowBox[{"t", 
                          ",", "\n", "  ", "        ", "body", ",", "\n", 
                          "          ", "token"}], "\n", "          ", 
                          "]"}]}]}], "\n", "        ", "]"}]}], ",", "\n", 
                          "      ", "n"}], "\n", "      ", "]"}]}], "\n", 
                    "    ", "]"}]}]], "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]tokenRead\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]tokenTrie\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tNeed some little trie functionality to \
optimize this token pulling\n\[RightFloor]", "Text", Evaluatable -> True], 
              Cell[BoxData[{RowBox[{RowBox[{RowBox[{"addDefTok", "[", 
                       RowBox[{"assoc_", ",", " ", RowBox[{"cur_:", 
                          "\"\""}]}], "]"}], ":=", "\n", "  ", RowBox[
                      {"AssociationMap", "[", "\n", "    ", RowBox[
                        {RowBox[{RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"cur1", "=", RowBox[{"cur", "<>", RowBox[
                          {"#", "[", RowBox[{"[", "1", "]"}], "]"}]}]}], 
                          "}"}], ",", "\n", "      ", RowBox[{RowBox[{"#", 
                          "[", RowBox[{"[", "1", "]"}], "]"}], "\[Rule]", 
                          "\n", "        ", RowBox[{"Map", "[", "\n", 
                          "          ", RowBox[{RowBox[{RowBox[{"If", "[", 
                          RowBox[{RowBox[{"AssociationQ", "[", "#", "]"}], 
                          ",", " ", RowBox[{"addDefTok", "[", RowBox[{"#", 
                          ",", " ", "cur1"}], "]"}], ",", " ", "#"}], "]"}], 
                          "&"}], ",", "\n", "          ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"AssociationQ", "@", RowBox[{"#", 
                          "[", RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                          RowBox[{"Append", "[", RowBox[{RowBox[{"#", "[", 
                          RowBox[{"[", "2", "]"}], "]"}], ",", " ", RowBox[
                          {"Default", "\[Rule]", "cur1"}]}], "]"}], ",", " ", 
                          RowBox[{"#", "[", RowBox[{"[", "2", "]"}], "]"}]}], 
                          "]"}]}], "\n", "          ", "]"}]}]}], "\n", 
                          "      ", "]"}], "&"}], ",", "\n", "    ", 
                         "assoc"}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"groupToks", "[", RowBox[
                        {"strings_", ",", " ", "pos_"}], "]"}], ":=", "\n", 
                     "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[
                          {"longer", "=", RowBox[{"Select", "[", RowBox[
                          {"strings", ",", " ", RowBox[{RowBox[{RowBox[
                          {"StringLength", "@", "#"}], ">=", "pos"}], 
                          "&"}]}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"Which", "[", "\n", "      ", RowBox[
                          {RowBox[{RowBox[{"Length", "@", "strings"}], "==", 
                          "1"}], ",", "\n", "        ", RowBox[{"strings", 
                          "[", RowBox[{"[", "1", "]"}], "]"}], ",", "\n", 
                          "      ", RowBox[{RowBox[{"Length", "@", 
                          "longer"}], ">", "0"}], ",", "\n", "        ", 
                          RowBox[{"GroupBy", "[", RowBox[{"longer", ",", " ", 
                          RowBox[{RowBox[{"StringTake", "[", RowBox[{"#", 
                          ",", " ", RowBox[{"{", "pos", "}"}]}], "]"}], 
                          "&"}], ",", " ", RowBox[{RowBox[{"groupToks", "[", 
                          RowBox[{"#", ",", " ", RowBox[{"pos", "+", "1"}]}], 
                          "]"}], "&"}]}], "]"}], ",", "\n", "      ", "True", 
                          ",", "\n", "        ", RowBox[{"strings", "[", 
                          RowBox[{"[", "1", "]"}], "]"}]}], "\n", "      ", 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{"tokenTrie", "[", "strings_", "]"}], ":=", 
                   "\n", "  ", RowBox[{"addDefTok", "@", RowBox[{"groupToks", 
                       "[", RowBox[{"strings", ",", " ", "1"}], "]"}]}]}]}], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]getTokenViaTrie\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"getTokenViaTrie", "[", RowBox[{"stream_", 
                      ",", " ", "trie_"}], "]"}], ":=", "\n", "  ", 
                  RowBox[{"(*", " ", RowBox[{"keep", " ", "walking", " ", 
                      "through", " ", "the", " ", "trie", " ", "until", " ", 
                      "we", " ", "find", " ", "what", " ", "token", " ", 
                      "was", " ", "returned"}], " ", "*)"}], "\n", "  ", 
                  RowBox[{"Module", "[", RowBox[{RowBox[{"{", RowBox[
                         {"c", ",", " ", RowBox[{"t", " ", "=", " ", 
                          "trie"}], ",", " ", "t2", ",", " ", RowBox[{"i", 
                          "=", "1"}], ",", " ", RowBox[{"sp", " ", "=", " ", 
                          RowBox[{"StreamPosition", "[", "stream", "]"}]}]}], 
                        "}"}], ",", "\n", "    ", RowBox[{RowBox[{"While", 
                          "[", RowBox[{RowBox[{"AssociationQ", "@", "t"}], 
                          ",", "\n", "      ", RowBox[{RowBox[{"c", " ", "=", 
                          " ", RowBox[{"Read", "[", RowBox[{"stream", ",", 
                          " ", "Character"}], "]"}]}], ";", "\n", "      ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"c", "===", 
                          "EndOfFile"}], ",", " ", RowBox[{RowBox[{"t", "=", 
                          "EndOfFile"}], ";", RowBox[{"Break", "[", 
                          "]"}]}]}], "]"}], ";", "\n", "      ", RowBox[
                          {"t2", " ", "=", " ", RowBox[{"t", "[", "c", 
                          "]"}]}], ";", "\n", "      ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{RowBox[{"StringQ", "@", "t2"}], 
                          "&&", RowBox[{RowBox[{"StringLength", "[", "t2", 
                          "]"}], ">", "i"}]}], ",", " ", "\n", "        ", 
                          RowBox[{"Skip", "[", RowBox[{"stream", ",", " ", 
                          "Character", ",", " ", RowBox[{RowBox[
                          {"StringLength", "[", "t2", "]"}], "-", "i"}]}], 
                          "]"}]}], "\n", "        ", "]"}], ";", "\n", 
                          "      ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"MissingQ", "@", "t2"}], ",", "  ", "\n", 
                          "        ", RowBox[{RowBox[{"t2", " ", "=", " ", 
                          RowBox[{"t", "[", "Default", "]"}]}], ";", "\n", 
                          "        ", RowBox[{"SetStreamPosition", "[", 
                          RowBox[{"stream", ",", " ", RowBox[{"sp", "+", 
                          RowBox[{"(", RowBox[{"i", "-", "1"}], ")"}]}]}], 
                          "]"}]}]}], "\n", "        ", "]"}], ";", "\n", 
                          "      ", RowBox[{"t", " ", "=", " ", "t2"}], ";", 
                          "\n", "      ", RowBox[{"i", "++"}]}]}], "\n", 
                          "      ", "]"}], ";", "\n", "    ", "t"}]}], "\n", 
                    "    ", "]"}]}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]tokenPuller\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tPulls the real token off the stream. \
\n\tHas to be a bit careful about things like \
\[OpenCurlyDoubleQuote]for\[CloseCurlyDoubleQuote] and EOFs.\n\[RightFloor]", 
               "Text", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"tokenPuller", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"tokenPuller", "[", "tokens_", "]"}], 
                     ":=", "\n", "  ", RowBox[{"tokenPuller", "[", "\n", 
                       "    ", RowBox[{RowBox[{"tokenTrie", "[", RowBox[
                          {"Select", "[", RowBox[{"tokens", ",", " ", 
                          "StringQ"}], "]"}], "]"}], ",", " ", "\n", "    ", 
                         RowBox[{"Min", "[", RowBox[{"StringLength", "/@", 
                          RowBox[{"Select", "[", RowBox[{"tokens", ",", " ", 
                          "StringQ"}], "]"}]}], "]"}]}], "\n", "    ", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {RowBox[{"tokenPuller", "[", RowBox[{"tokSet_", ",", 
                          " ", "min_"}], "]"}], "[", "stream_", "]"}], ":=", 
                     "\n", "  ", RowBox[{"pullTokenToo", "[", RowBox[
                        {"stream", ",", " ", "tokSet", ",", " ", "min"}], 
                       "]"}]}], ";"}], "\n", RowBox[{"pullTokenToo", "//", 
                   "Clear"}], "\n", RowBox[{RowBox[{"pullTokenToo", "[", 
                     RowBox[{"stream_", ",", " ", "tokTrie_", ",", " ", 
                       "minTok_"}], "]"}], ":=", "\n", "  ", RowBox[
                    {"(*", " ", RowBox[{RowBox[{"gotta", " ", "figure", " ", 
                         "out", " ", "which", " ", "token", " ", "we", " ", 
                         "actually", " ", "got"}], "..."}], " ", "*)"}], 
                   "\n", "  ", RowBox[{"Module", "[", RowBox[{RowBox[
                        {"{", RowBox[{"tok", ",", " ", "tmp", ",", " ", 
                          "spos", ",", " ", "spos2"}], "}"}], ",", "\n", 
                       "    ", RowBox[{RowBox[{RowBox[{"spos", " ", "=", " ", 
                          RowBox[{"StreamPosition", "[", "stream", "]"}]}], 
                          ";", "\n", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"spos", ">", "0"}], ",", "\n", "      ", 
                          RowBox[{"(*", " ", RowBox[{RowBox[{"ensure", " ", 
                          "that", " ", "if", " ", RowBox[{"we", "'"}], "re", 
                          " ", "in", " ", "a", " ", "word"}], "-", RowBox[
                          {"type", " ", "token", " ", "a", " ", "non"}], "-", 
                          RowBox[{"word", " ", "preceded", " ", "it"}]}], 
                          " ", "*)"}], "\n", "      ", RowBox[{RowBox[{"tok", 
                          " ", "=", " ", RowBox[{"Read", "[", RowBox[
                          {"stream", ",", " ", "Character"}], "]"}]}], ";", 
                          "\n", "      ", RowBox[{"spos2", " ", "=", " ", 
                          RowBox[{"StreamPosition", "[", "stream", "]"}]}], 
                          ";", "\n", "      ", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{"StringQ", "@", "tok"}], "&&", 
                          RowBox[{"StringMatchQ", "[", RowBox[{"tok", ",", 
                          " ", "WordCharacter"}], "]"}]}], ",", " ", "\n", 
                          "  ", "      ", RowBox[{RowBox[{
                          "SetStreamPosition", "[", RowBox[{"stream", ",", 
                          " ", RowBox[{"spos", "-", "1"}]}], "]"}], ";", 
                          "\n", "        ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"StringMatchQ", "[", RowBox[{RowBox[{"Read", "[", 
                          RowBox[{"stream", ",", " ", "Character"}], "]"}], 
                          ",", " ", "WordCharacter"}], "]"}], ",", "\n", 
                          "          ", RowBox[{RowBox[{"SetStreamPosition", 
                          "[", RowBox[{"stream", ",", " ", "spos2"}], "]"}], 
                          ";", "\n", "  ", "        ", RowBox[{"Return", "[", 
                          RowBox[{RowBox[{"{", RowBox[{"$Failed", ",", " ", 
                          "tok"}], "}"}], ",", " ", "Module"}], "]"}]}]}], 
                          "\n", "          ", "]"}]}]}], "\n", "        ", 
                          "]"}], ";", "\n", "      ", RowBox[
                          {"SetStreamPosition", "[", RowBox[{"stream", ",", 
                          " ", "spos"}], "]"}], ";"}]}], "\n", "      ", 
                          "]"}], ";", "\n", "    ", RowBox[{"tok", " ", "=", 
                          " ", RowBox[{"getTokenViaTrie", "[", RowBox[
                          {"stream", ",", " ", "tokTrie"}], "]"}]}], ";", 
                          "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"tok", " ", "===", " ", "EndOfFile"}], ",", " ", 
                          RowBox[{"Return", "[", RowBox[{"tok", ",", " ", 
                          "Module"}], "]"}]}], "]"}], ";", "\n", "    ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"StringMatchQ", 
                          "[", RowBox[{RowBox[{"StringTake", "[", RowBox[
                          {"tok", ",", " ", RowBox[{"{", "1", "}"}]}], "]"}], 
                          ",", " ", "WordCharacter"}], "]"}], ",", "\n", 
                          "       ", RowBox[{"(*", " ", RowBox[{"finally", 
                          " ", "need", " ", "to", " ", "check", " ", "that", 
                          " ", "next", " ", "char", " ", RowBox[{"isn", 
                          "'"}], "t", " ", "another", " ", "WordCharacter"}], 
                          " ", "*)"}], "\n", "      ", RowBox[{RowBox[{"tmp", 
                          " ", "=", " ", RowBox[{"Read", "[", RowBox[
                          {"stream", ",", " ", "Character"}], "]"}]}], ";", 
                          "\n", "      ", RowBox[{"If", "[", RowBox[{RowBox[
                          {RowBox[{"StringQ", "@", "tmp"}], "&&", RowBox[
                          {"StringMatchQ", "[", RowBox[{"tmp", ",", " ", 
                          "WordCharacter"}], "]"}]}], ",", "\n", "        ", 
                          RowBox[{RowBox[{"SetStreamPosition", "[", RowBox[
                          {"stream", ",", " ", "spos"}], "]"}], ";", "\n", 
                          "  ", "      ", RowBox[{"Return", "[", RowBox[
                          {RowBox[{"{", RowBox[{"$Failed", ",", " ", "tok"}], 
                          "}"}], ",", " ", "Module"}], "]"}]}]}], "\n", 
                          "        ", "]"}]}]}], "\n", "      ", "]"}], ";", 
                          "\n", "    ", RowBox[{"SetStreamPosition", "[", 
                          RowBox[{"stream", ",", " ", "spos"}], "]"}], ";"}], 
                         "\n", "    ", RowBox[{"(*", RowBox[{"Which", "[", 
                          RowBox[{"(*", " ", RowBox[{"get", " ", "stream", 
                          " ", "ready", " ", "for", " ", "next", " ", "Read", 
                          " ", "call"}], " ", "*)"}], "\n", "      ", RowBox[
                          {RowBox[{RowBox[{"StringQ", "[", "tok", "]"}], 
                          "&&", RowBox[{RowBox[{"StringLength", "[", "tok", 
                          "]"}], ">", "1"}]}], ",", " ", "\n", "  ", 
                          "      ", RowBox[{"SetStreamPosition", "[", RowBox[
                          {"stream", ",", " ", RowBox[{RowBox[
                          {"StreamPosition", "[", "stream", "]"}], "-", 
                          "1"}]}], "]"}], ",", "\n", "      ", RowBox[
                          {"spos", ">", "0"}], ",", "\n", "        ", RowBox[
                          {"SetStreamPosition", "[", RowBox[{"stream", ",", 
                          " ", "spos"}], "]"}]}], "\n", "      ", "]"}], 
                          "*)"}], ";", "\n", "    ", "tok"}]}], "\n", "    ", 
                     "]"}]}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]tokenRead\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"tokenRead", "[", RowBox[{"stream_", 
                        ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", 
                    "\n", "  ", RowBox[{RowBox[{"TokenStreamer", "[", 
                        RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], 
                        "]"}], "@", RowBox[{"\"Read\"", "[", "]"}]}]}], 
                  ";"}]], "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]tokenPeek\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"tokenPeek", "[", RowBox[{"stream_", 
                        ",", " ", "spec_", ",", " ", "t_"}], "]"}], ":=", 
                    "\n", "  ", RowBox[{RowBox[{"TokenStreamer", "[", 
                        RowBox[{"stream", ",", " ", "spec", ",", " ", "t"}], 
                        "]"}], "@", RowBox[{"\"Peek\"", "[", "]"}]}]}], 
                  ";"}]], "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]tokenReadList\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell[CellGroupData[{Cell["\[LeftCeiling]new\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[RowBox[{RowBox[{RowBox[{"tokenReadList", "[", 
                         RowBox[{"stream_", ",", " ", "spec_", ",", " ", 
                          "n_", ",", " ", "t_"}], "]"}], ":=", "\n", "  ", 
                       RowBox[{RowBox[{"TokenStreamer", "[", RowBox[
                          {"stream", ",", " ", "spec", ",", " ", "t"}], 
                          "]"}], "@", RowBox[{"\"Read\"", "[", "n", 
                          "]"}]}]}], ";"}]], "CodeInput"]}, Open]]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]tokenPeekList\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"tokenPeekList", "[", RowBox[
                       {"stream_", ",", " ", "spec_", ",", " ", "n_", ",", 
                        " ", "t_"}], "]"}], ":=", "\n", "  ", RowBox[
                     {RowBox[{"TokenStreamer", "[", RowBox[{"stream", ",", 
                          " ", "spec", ",", " ", "t"}], "]"}], "@", 
                      RowBox[{"\"Peek\"", "[", "n", "]"}]}]}], ";"}]], 
               "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]TokenRead\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]prepTokenHandlers\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"prepTokenHandler", "//", "Clear"}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"prepTokenHandler", "[", 
                       RowBox[{"{", RowBox[{"\"Stream\"", ",", " ", "char_", 
                          ",", " ", "escape___"}], "}"}], "]"}], ":=", 
                     RowBox[{"readString", "[", RowBox[{"char", ",", " ", 
                         "escape"}], "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"prepTokenHandler", "[", RowBox[{"{", 
                         RowBox[{"\"LookAhead\"", ",", " ", "dispatch_"}], 
                         "}"}], "]"}], ":=", RowBox[{"readLookAhead", "[", 
                       "dispatch", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"prepTokenHandler", "[", "e_", "]"}], 
                     ":=", "e"}], ";"}]}], "CodeInput"], Cell[BoxData[
                RowBox[{RowBox[{"prepTokenHandlers", "[", "tokens_", "]"}], 
                  ":=", "\n", "  ", RowBox[{"ReplacePart", "[", "\n", "    ", 
                    RowBox[{"tokens", ",", "\n", "    ", RowBox[
                       {"\"Handlers\"", "->", "\n", "      ", RowBox[{"Join", 
                          "[", "\n", "        ", RowBox[{RowBox[{"<|", "\n", 
                          "          ", RowBox[{"EndOfFile", "\[Rule]", 
                          "LexerToken"}], "\n", "          ", "|>"}], ",", 
                          "\n", "        ", RowBox[{"Map", "[", "\n", 
                          "          ", RowBox[{"prepTokenHandler", ",", 
                          "\n", "          ", RowBox[{"tokens", "[", 
                          "\"Handlers\"", "]"}]}], "\n", "          ", 
                          "]"}]}], "\n", "        ", "]"}]}]}], "\n", "    ", 
                    "]"}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TokenRead\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"TokenRead", "[", RowBox[
                       {"t_TokenStream", ",", " ", RowBox[{"n", ":", RowBox[
                          {"_Integer", "?", "Positive"}], ":", "1"}]}], 
                      "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", 
                      RowBox[{RowBox[{"{", RowBox[{RowBox[{"stream", "=", 
                          RowBox[{"t", "[", "\"Stream\"", "]"}]}], ",", " ", 
                          RowBox[{"spec", "=", RowBox[{"prepTokenHandlers", 
                          "@", RowBox[{"t", "[", "\"Tokens\"", "]"}]}]}]}], 
                          "}"}], ",", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"n", ">", "1"}], ",", " ", "\n", 
                          "        ", RowBox[{"tokenReadList", "[", RowBox[
                          {"stream", ",", " ", "spec", ",", " ", "n", ",", 
                          " ", "t"}], "]"}], ",", "\n", "        ", RowBox[
                          {"tokenRead", "[", RowBox[{"stream", ",", " ", 
                          "spec", ",", " ", "t"}], "]"}]}], "\n", "        ", 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]TokenRead\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"TokenPeek", "[", RowBox[
                       {"t_TokenStream", ",", " ", RowBox[{"n", ":", RowBox[
                          {"_Integer", "?", "Positive"}], ":", "1"}]}], 
                      "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", 
                      RowBox[{RowBox[{"{", RowBox[{RowBox[{"stream", "=", 
                          RowBox[{"t", "[", "\"Stream\"", "]"}]}], ",", " ", 
                          RowBox[{"spec", "=", RowBox[{"prepTokenHandlers", 
                          "@", RowBox[{"t", "[", "\"Tokens\"", "]"}]}]}]}], 
                          "}"}], ",", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"n", ">", "1"}], ",", " ", "\n", 
                          "      ", RowBox[{"tokenPeekList", "[", RowBox[
                          {"stream", ",", " ", "spec", ",", " ", "n", ",", 
                          " ", "t"}], "]"}], ",", "\n", "      ", RowBox[
                          {"tokenPeek", "[", RowBox[{"stream", ",", " ", 
                          "spec", ",", " ", "t"}], "]"}]}], "\n", "      ", 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}]], 
               "CodeInput"]}, Open]]}, Open]]}, Open]], 
     Cell[BoxData[RowBox[{RowBox[{"End", "[", "]"}], ";"}]], 
      "InputSection"]}, Open]], Cell["", "SectionSeparator"]}, 
 FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
 StyleDefinitions -> FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
   CharacterEncoding -> "UTF-8"]]
